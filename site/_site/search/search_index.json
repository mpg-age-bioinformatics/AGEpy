{
    "docs": [
        {
            "location": "/", 
            "text": "AGEpy \n \n \n\n\nThis python package contains Bioinformatics tools developed at the\nBioinformatics Core Facility of the Max Planck Institute for Biology of Ageing.\n\n\n\n\nMax Planck Institute for Biology of Ageing\n\nJoseph-Stelzmann-Str. 9b\n\nD-50931 Cologne\n\nGermany\n\n\n\n\nhttps://bioinformatics.age.mpg.de\n\n\nInstallation\n\n\npip\n\n\npip install https://github.com/mpg-age-bioinformatics/AGEpy/archive/0.6.0.tar.gz --user\n\n\n\n\ngithub\n\n\nGet the latest development version from github:\n\n\ngit clone https://github.com/mpg-age-bioinformatics/AGEpy\n\n\n\n\nInstall:\n\n\ncd AGEpy\npython setup.py install --user\n\n\n\n\nand then update to the latest release whenever required with:\n\n\ncd AGEpy\ngit pull\npython setup.py install --user --force\n\n\n\n\nAlternatively you can also install the package with a symlink, so that changes\nto the source files will be immediately available to users of the package on\nyour system:\n\n\ncd AGEpy\npython setup.py develop --user\n\n\n\n\nBe aware that with the develop option you won't be able to properly update once new scripts are added.", 
            "title": "Home"
        }, 
        {
            "location": "/#agepy", 
            "text": "This python package contains Bioinformatics tools developed at the\nBioinformatics Core Facility of the Max Planck Institute for Biology of Ageing.   Max Planck Institute for Biology of Ageing \nJoseph-Stelzmann-Str. 9b \nD-50931 Cologne \nGermany   https://bioinformatics.age.mpg.de", 
            "title": "AGEpy"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#pip", 
            "text": "pip install https://github.com/mpg-age-bioinformatics/AGEpy/archive/0.6.0.tar.gz --user", 
            "title": "pip"
        }, 
        {
            "location": "/#github", 
            "text": "Get the latest development version from github:  git clone https://github.com/mpg-age-bioinformatics/AGEpy  Install:  cd AGEpy\npython setup.py install --user  and then update to the latest release whenever required with:  cd AGEpy\ngit pull\npython setup.py install --user --force  Alternatively you can also install the package with a symlink, so that changes\nto the source files will be immediately available to users of the package on\nyour system:  cd AGEpy\npython setup.py develop --user  Be aware that with the develop option you won't be able to properly update once new scripts are added.", 
            "title": "github"
        }, 
        {
            "location": "/cookbook/", 
            "text": "Importing\n\n\nAll functions in the AGEpy pakcage can be accessed using:\n\n\nimport AGEpy as age\nhelp(age.readGTF)\n\n\n\n\nAlternatively, functions from the different modules can be accessed with for example:\n\n\nfrom AGEpy import gtf\nhelp(gtf.readGTF)\n\n\n\n\nHelp\n\n\nIn bash:\n\n\npydoc AGEpy.AGEpy\n\n\n\n\nIn python:\n\n\nhelp(\nAGEpy.AGEpy\n)\n\n\n\n\nExample usage\n\n\nimport AGEpy as age\n\ngtf=age.readGTF(\n/path/to/file.gtf\n)\n\ngtf.head()", 
            "title": "Cookbook"
        }, 
        {
            "location": "/cookbook/#importing", 
            "text": "All functions in the AGEpy pakcage can be accessed using:  import AGEpy as age\nhelp(age.readGTF)  Alternatively, functions from the different modules can be accessed with for example:  from AGEpy import gtf\nhelp(gtf.readGTF)", 
            "title": "Importing"
        }, 
        {
            "location": "/cookbook/#help", 
            "text": "In bash:  pydoc AGEpy.AGEpy  In python:  help( AGEpy.AGEpy )", 
            "title": "Help"
        }, 
        {
            "location": "/cookbook/#example-usage", 
            "text": "import AGEpy as age\n\ngtf=age.readGTF( /path/to/file.gtf )\n\ngtf.head()", 
            "title": "Example usage"
        }, 
        {
            "location": "/modules/bed/", 
            "text": "GetBEDnarrowPeakgz\n\n\nReads a gz compressed BED narrow peak file from a web address or local file and returns a pandas dataframe.\n\n\nGetBEDnarrowPeakgz(URL_or_PATH_TO_file)\n\n\n\n\n\n\nURL_or_PATH_TO_file\n source of input bed. Either a web link or a path to a local file.\n\n\n\n\n\n\nreturns\n a pandas dataframe of the inpud bed.\n\n\n\n\n\n\n import AGEpy as age\n\n\n eCLIP_1_bednarrowPeak=\nhttps://www.encodeproject.org/files/ENCFF066PCT/@@download/ENCFF066PCT.bed.gz\n\n\n bed=age.GetBEDnarrowPeakgz(eCLIP_1_bednarrowPeak)\n\n print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1\n\n\n\n\n\n\nwriteBED\n\n\nWrites a bed dataframe into a bed file.\n\n\nwriteBED(inBED, file_path)\n\n\n\n\ninBED\n a pandas dataframe with the contents of the bed file to be written.\n\n\n\n\nfile_path\n path to target file.\n\n\n\n\n\n\nreturns\n nothing.\n\n\n\n\n\n\n import AGEpy as age\n\n print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1\n\n\n age.writeBED(bed,\n/path/to/file.bed\n)\n\n\n\n\n\n\ndfTObedtool\n\n\nTransforms a pandas dataframe into a bedtool. Requires \nbedtools\n to be in your \npath\n.\n\n\ndfTObedtool(df)\n\n\n\n\ndf\n a pandas dataframe.\n\n\nreturns\n a bedtool.\n\n\n\n\n import AGEpy as age\n\n print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1\n\n\n bedtool=age.dfTObedtool(bed)\n\n print bedtool.head()\n\nchr7    139371278   139371296   Peak_0  1000    +   5.09062636514014    48.9834262537309    -1  -1\nchr7    139371257   139371278   Peak_1  1000    +   5.0840236303159 48.7463712698062    -1  -1\nchr7    155781335   155781431   Peak_2  1000    +   3.70481328524336    42.6519289009201    -1  -1\nchr7    87156569    87156676    Peak_3  1000    +   3.95023151551588    37.7848384917051    -1  -1\nchr7    105073472   105073521   Peak_4  1000    +   4.14556204062503    34.0756845242392    -1  -1\nchr7    128761857   128761952   Peak_5  1000    +   4.02131461357736    33.9350181783027    -1  -1\nchr7    121296414   121296454   Peak_6  1000    +   3.50632247892067    30.2512926812531    -1  -1\nchr7    139368342   139368352   Peak_7  1000    +   4.41912711395099    29.6666535015756    -1  -1\nchr7    87155583    87155635    Peak_8  1000    +   4.08769554637519    29.3752024210392    -1  -1\nchr7    105540000   105540028   Peak_9  1000    +   4.2212263105571 29.0451450847765    -1  -1\n\n\n print type(bed)\n\n\nclass 'pandas.core.frame.DataFrame'\n\n\n\n print type(bedtool)\n\n\nclass 'pybedtools.bedtool.BedTool'\n\n\n\n\n\n\n\nGetPeaksExons\n\n\nAnnotates a bedtool, BED narrow peak.\n\n\nGetPeaksExons(bed,parsedGTF)\n\n\n\n\nbed\n a pandas dataframe in bed format\n\n\n\n\nparsedGTF\n a parsed GTF file as outputed by parseGTF()\n\n\n\n\n\n\nreturns\n a Pandas dataframe\n\n\n\n\n\n\n import AGEpy as age\n\n print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1\n\n\n GTF=age.readGTF(\n/beegfs/group_bit/data/projects/departments/Bioinformatics/bit_RNAseq_eCLIP/downloads/gencode.v24.primary_assembly.annotation.gtf\n)\n\n print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id \nENSG00000223972.5\n; gene_type \ntransc...\n  \n1  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n\n\n GTFpa=age.parseGTF(GTF)\n\n print GTFpa.head()\n\nseqname  source     feature  start    end score strand frame gene_status  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .       KNOWN   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .       KNOWN   \n2    chr1  HAVANA        exon  11869  12227     .      +     .       KNOWN   \n3    chr1  HAVANA        exon  12613  12721     .      +     .       KNOWN   \n4    chr1  HAVANA        exon  13221  14409     .      +     .       KNOWN   \n\n            havana_gene    ...               exon_id      transcript_id  \\\n0  OTTHUMG00000000961.2    ...                   NaN                NaN   \n1  OTTHUMG00000000961.2    ...                   NaN  ENST00000456328.2   \n2  OTTHUMG00000000961.2    ...     ENSE00002234944.1  ENST00000456328.2   \n3  OTTHUMG00000000961.2    ...     ENSE00003582793.1  ENST00000456328.2   \n4  OTTHUMG00000000961.2    ...     ENSE00002312635.1  ENST00000456328.2   \n\n  exon_number  ont     havana_transcript ccdsid transcript_name  \\\n0         NaN  NaN                   NaN    NaN             NaN   \n1         NaN  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n2           1  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n3           2  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n4           3  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n\n                            gene_type transcript_status gene_name  \n0  transcribed_unprocessed_pseudogene               NaN   DDX11L1  \n1  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n2  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n3  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n4  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1\n\n\n bedAn=age.GetPeaksExons(bed,GTFpa)\n\n print bedAn.head()\n\nchrom  chromStart   chromEnd     name  score strand  signalValue  \\\n0  chr7   155781335  155781431   Peak_2   1000      +     3.704813   \n1  chr7   155781335  155781431   Peak_2   1000      +     3.704813   \n2  chr7   121296414  121296454   Peak_6   1000      +     3.506322   \n3  chr7    87155538   87155583  Peak_16   1000      +     4.077391   \n4  chr7   107904733  107904812  Peak_17   1000      +     3.674368   \n\n   -log10(pValue)  -log10(qvalue)  peak         ...           \\\n0       42.651929              -1    -1         ...            \n1       42.651929              -1    -1         ...            \n2       30.251293              -1    -1         ...            \n3       22.798739              -1    -1         ...            \n4       21.118496              -1    -1         ...            \n\n              gene_id  exon_id_count  exon_id norm. mean -log10(pValue)  \\\n0  ENSG00000184863.10              1                          42.651929   \n1  ENSG00000184863.10              1                          42.651929   \n2  ENSG00000106034.17              1                          30.251293   \n3  ENSG00000135164.18              3                        2951.868281   \n4  ENSG00000091140.12              1                          21.118496   \n\n  exon_id signalValue transcript_id_count  \\\n0            3.704813                   1   \n1            3.704813                   1   \n2            3.506322                   1   \n3           42.703999                   3   \n4            3.674368                   1   \n\n  transcript_id norm. mean -log10(pValue)  transcript_id signalValue  \\\n0                               42.651929                   3.704813   \n1                               42.651929                   3.704813   \n2                               30.251293                   3.506322   \n3                             2951.868281                  42.703999   \n4                               21.118496                   3.674368   \n\n  gene_id_count gene_id norm. mean -log10(pValue)  gene_id signalValue  \n0             4                        116.619012            17.830941  \n1             4                        116.619012            17.830941  \n2             2                         30.251293             2.144090  \n3             8                       3300.707425            73.902289  \n4             5                        135.139064            22.210269  \n\n\n\n\ngene_id_count\n: number of intervals overlapping this gene\n\n\ntranscript_id_count\n: number of intervals overlapping this transcript\n\n\nexon_id_count\n: number of intervals overlapping this exon", 
            "title": "bed"
        }, 
        {
            "location": "/modules/bed/#getbednarrowpeakgz", 
            "text": "Reads a gz compressed BED narrow peak file from a web address or local file and returns a pandas dataframe.  GetBEDnarrowPeakgz(URL_or_PATH_TO_file)    URL_or_PATH_TO_file  source of input bed. Either a web link or a path to a local file.    returns  a pandas dataframe of the inpud bed.     import AGEpy as age  eCLIP_1_bednarrowPeak= https://www.encodeproject.org/files/ENCFF066PCT/@@download/ENCFF066PCT.bed.gz   bed=age.GetBEDnarrowPeakgz(eCLIP_1_bednarrowPeak)  print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1", 
            "title": "GetBEDnarrowPeakgz"
        }, 
        {
            "location": "/modules/bed/#writebed", 
            "text": "Writes a bed dataframe into a bed file.  writeBED(inBED, file_path)   inBED  a pandas dataframe with the contents of the bed file to be written.   file_path  path to target file.    returns  nothing.     import AGEpy as age  print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1  age.writeBED(bed, /path/to/file.bed )", 
            "title": "writeBED"
        }, 
        {
            "location": "/modules/bed/#dftobedtool", 
            "text": "Transforms a pandas dataframe into a bedtool. Requires  bedtools  to be in your  path .  dfTObedtool(df)   df  a pandas dataframe.  returns  a bedtool.    import AGEpy as age  print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1  bedtool=age.dfTObedtool(bed)  print bedtool.head()\n\nchr7    139371278   139371296   Peak_0  1000    +   5.09062636514014    48.9834262537309    -1  -1\nchr7    139371257   139371278   Peak_1  1000    +   5.0840236303159 48.7463712698062    -1  -1\nchr7    155781335   155781431   Peak_2  1000    +   3.70481328524336    42.6519289009201    -1  -1\nchr7    87156569    87156676    Peak_3  1000    +   3.95023151551588    37.7848384917051    -1  -1\nchr7    105073472   105073521   Peak_4  1000    +   4.14556204062503    34.0756845242392    -1  -1\nchr7    128761857   128761952   Peak_5  1000    +   4.02131461357736    33.9350181783027    -1  -1\nchr7    121296414   121296454   Peak_6  1000    +   3.50632247892067    30.2512926812531    -1  -1\nchr7    139368342   139368352   Peak_7  1000    +   4.41912711395099    29.6666535015756    -1  -1\nchr7    87155583    87155635    Peak_8  1000    +   4.08769554637519    29.3752024210392    -1  -1\nchr7    105540000   105540028   Peak_9  1000    +   4.2212263105571 29.0451450847765    -1  -1  print type(bed) class 'pandas.core.frame.DataFrame'   print type(bedtool) class 'pybedtools.bedtool.BedTool'", 
            "title": "dfTObedtool"
        }, 
        {
            "location": "/modules/bed/#getpeaksexons", 
            "text": "Annotates a bedtool, BED narrow peak.  GetPeaksExons(bed,parsedGTF)   bed  a pandas dataframe in bed format   parsedGTF  a parsed GTF file as outputed by parseGTF()    returns  a Pandas dataframe     import AGEpy as age  print bed.head()\n\nchrom chromStart   chromEnd    name score strand       signalValue  \\\n0  chr7  139371278  139371296  Peak_0  1000      +  5.09062636514014   \n1  chr7  139371257  139371278  Peak_1  1000      +   5.0840236303159   \n2  chr7  155781335  155781431  Peak_2  1000      +  3.70481328524336   \n3  chr7   87156569   87156676  Peak_3  1000      +  3.95023151551588   \n4  chr7  105073472  105073521  Peak_4  1000      +  4.14556204062503   \n\n     -log10(pValue) -log10(qvalue) peak  \n0  48.9834262537309             -1   -1  \n1  48.7463712698062             -1   -1  \n2  42.6519289009201             -1   -1  \n3  37.7848384917051             -1   -1  \n4  34.0756845242392             -1   -1  GTF=age.readGTF( /beegfs/group_bit/data/projects/departments/Bioinformatics/bit_RNAseq_eCLIP/downloads/gencode.v24.primary_assembly.annotation.gtf )  print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id  ENSG00000223972.5 ; gene_type  transc...   \n1  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...     GTFpa=age.parseGTF(GTF)  print GTFpa.head()\n\nseqname  source     feature  start    end score strand frame gene_status  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .       KNOWN   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .       KNOWN   \n2    chr1  HAVANA        exon  11869  12227     .      +     .       KNOWN   \n3    chr1  HAVANA        exon  12613  12721     .      +     .       KNOWN   \n4    chr1  HAVANA        exon  13221  14409     .      +     .       KNOWN   \n\n            havana_gene    ...               exon_id      transcript_id  \\\n0  OTTHUMG00000000961.2    ...                   NaN                NaN   \n1  OTTHUMG00000000961.2    ...                   NaN  ENST00000456328.2   \n2  OTTHUMG00000000961.2    ...     ENSE00002234944.1  ENST00000456328.2   \n3  OTTHUMG00000000961.2    ...     ENSE00003582793.1  ENST00000456328.2   \n4  OTTHUMG00000000961.2    ...     ENSE00002312635.1  ENST00000456328.2   \n\n  exon_number  ont     havana_transcript ccdsid transcript_name  \\\n0         NaN  NaN                   NaN    NaN             NaN   \n1         NaN  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n2           1  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n3           2  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n4           3  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n\n                            gene_type transcript_status gene_name  \n0  transcribed_unprocessed_pseudogene               NaN   DDX11L1  \n1  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n2  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n3  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n4  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  bedAn=age.GetPeaksExons(bed,GTFpa)  print bedAn.head()\n\nchrom  chromStart   chromEnd     name  score strand  signalValue  \\\n0  chr7   155781335  155781431   Peak_2   1000      +     3.704813   \n1  chr7   155781335  155781431   Peak_2   1000      +     3.704813   \n2  chr7   121296414  121296454   Peak_6   1000      +     3.506322   \n3  chr7    87155538   87155583  Peak_16   1000      +     4.077391   \n4  chr7   107904733  107904812  Peak_17   1000      +     3.674368   \n\n   -log10(pValue)  -log10(qvalue)  peak         ...           \\\n0       42.651929              -1    -1         ...            \n1       42.651929              -1    -1         ...            \n2       30.251293              -1    -1         ...            \n3       22.798739              -1    -1         ...            \n4       21.118496              -1    -1         ...            \n\n              gene_id  exon_id_count  exon_id norm. mean -log10(pValue)  \\\n0  ENSG00000184863.10              1                          42.651929   \n1  ENSG00000184863.10              1                          42.651929   \n2  ENSG00000106034.17              1                          30.251293   \n3  ENSG00000135164.18              3                        2951.868281   \n4  ENSG00000091140.12              1                          21.118496   \n\n  exon_id signalValue transcript_id_count  \\\n0            3.704813                   1   \n1            3.704813                   1   \n2            3.506322                   1   \n3           42.703999                   3   \n4            3.674368                   1   \n\n  transcript_id norm. mean -log10(pValue)  transcript_id signalValue  \\\n0                               42.651929                   3.704813   \n1                               42.651929                   3.704813   \n2                               30.251293                   3.506322   \n3                             2951.868281                  42.703999   \n4                               21.118496                   3.674368   \n\n  gene_id_count gene_id norm. mean -log10(pValue)  gene_id signalValue  \n0             4                        116.619012            17.830941  \n1             4                        116.619012            17.830941  \n2             2                         30.251293             2.144090  \n3             8                       3300.707425            73.902289  \n4             5                        135.139064            22.210269    gene_id_count : number of intervals overlapping this gene  transcript_id_count : number of intervals overlapping this transcript  exon_id_count : number of intervals overlapping this exon", 
            "title": "GetPeaksExons"
        }, 
        {
            "location": "/modules/biom/", 
            "text": "datasetsBM\n\n\nLists BioMart datasets.\n\n\ndatasetsBM(host=biomart_host)\n\n\n\n\nhost\n address of the host server, default='http://www.ensembl.org/biomart'\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n age.datasetsBM()\n\nu'acarolinensis_gene_ensembl'   Anole lizard genes (AnoCar2.0),\nu'acarolinensis_genomic_sequence'   Anole lizard sequences (AnoCar2.0),\nu'amelanoleuca_gene_ensembl'    Panda genes (ailMel1),\nu'amelanoleuca_genomic_sequence'    Panda sequences (ailMel1),\nu'amexicanus_gene_ensembl'  Cave fish genes (AstMex102),\nu'amexicanus_genomic_sequence'  Cave fish sequences (AstMex102),\nu'anancymaae_gene_ensembl'  Ma's night monkey genes (Anan_2.0),\nu'anancymaae_genomic_sequence'  Ma's night monkey sequences (Anan_2.0),\nu'aplatyrhynchos_gene_ensembl'  Duck genes (BGI_duck_1.0),\nu'aplatyrhynchos_genomic_sequence'  Duck sequences (BGI_duck_1.0),\nu'btaurus_gene_ensembl' Cow genes (UMD3.1),\nu'btaurus_genomic_sequence' Cow sequences (UMD3.1),\nu'btaurus_marker_end'   marker_feature_end,\nu'btaurus_marker_start' marker_feature,\nu'btaurus_qtl_feature'  qtl_feature,\n.\n.\n.\n\n\n\n\n\n\nfiltersBM\n\n\nLists BioMart filters for a specific dataset.\n\n\nfiltersBM(dataset,host=biomart_host)\n\n\n\n\ndataset\n dataset to list filters of\n\n\n\n\nhost\n address of the host server, default='http://www.ensembl.org/biomart'\n\n\n\n\n\n\nreturns\n nothing\n\n\n\n\n\n\n import AGEpy as age\n\n age.filtersBM('hsapiens_gene_ensembl')\n\nu'affy_hc_g110' 'AFFY HC G110 probe ID(s) [e.g. 266_s_at]' (type    id_list, values []),\nu'affy_hg_focus'    'AFFY HG Focus probe ID(s) [e.g. 212481_s_at]' (type    id_list, values []),\nu'affy_hg_u133_plus_2'  'AFFY HG U133 Plus 2 probe ID(s) [e.g. 1553551_s_at]' (type id_list, values []),\nu'affy_hg_u133a'    'AFFY HG U133A probe ID(s) [e.g. 211600_at]' (type  id_list, values []),\nu'affy_hg_u133a_2'  'AFFY HG U133A 2 probe ID(s) [e.g. 211600_at]' (type    id_list, values []),\nu'affy_hg_u133b'    'AFFY HG U133B probe ID(s) [e.g. 224321_at]' (type  id_list, values []),\nu'affy_hg_u95a' 'AFFY HG U95A probe ID(s) [e.g. 33866_at]' (type    id_list, values []),\nu'affy_hg_u95av2'   'AFFY HG U95Av2 probe ID(s) [e.g. 33866_at]' (type  id_list, values []),\nu'affy_hg_u95b' 'AFFY HG U95B probe ID(s) [e.g. 48794_s_at]' (type  id_list, values []),\nu'affy_hg_u95c' 'AFFY HG U95C probe ID(s) [e.g. 66888_at]' (type    id_list, values []),\nu'affy_hg_u95d' 'AFFY HG U95D probe ID(s) [e.g. 70806_at]' (type    id_list, values []),\nu'affy_hg_u95e' 'AFFY HG U95E probe ID(s) [e.g. 88289_at]' (type    id_list, values []),\nu'affy_hta_2_0' 'AFFY HTA 2 0 probe ID(s) [e.g. TC04001102.hg]' (type   id_list, values []),\nu'affy_huex_1_0_st_v2'  'AFFY HuEx 1 0 st v2 probe ID(s) [e.g. 4037584]' (type  id_list, values []),\nu'affy_hugene_1_0_st_v1'    'AFFY HuGene 1 0 st v1 probe ID(s) [e.g. 8165644]' (type    id_list, values []),\nu'affy_hugene_2_0_st_v1'    'AFFY HuGene 2 0 st v1 probe ID(s) [e.g. 17100641]' (type   id_list, values []),\nu'affy_hugenefl'    'AFFY HuGeneFL probe ID(s) [e.g. Z70759_at]' (type  id_list, values []),\nu'affy_primeview'   'AFFY PrimeView probe ID(s) [e.g. 11761516_x_at]' (type id_list, values []),\n.\n.\n.\n\n\n\n\n\n\n\nattributesBM\n\n\nLists BioMart attributes for a specific dataset.\n\n\nattributesBM(dataset,host=biomart_host)\n\n\n\n\ndataset\n dataset to list attributes of\n\n\n\n\nhost\n address of the host server, default='http://www.ensembl.org/biomart'\n\n\n\n\n\n\nreturns\n nothing\n\n\n\n\n\n\n import AGEpy as age\n\n age.attributesBM('hsapiens_gene_ensembl')\n\nu'3_utr_end'    '3' UTR end' (default   False),\n u'3_utr_start' '3' UTR start' (default False),\n u'3utr'    '3' UTR' (default   False),\n u'5_utr_end'   '5' UTR end' (default   False),\n u'5_utr_start' '5' UTR start' (default False),\n u'5utr'    '5' UTR' (default   False),\n u'acarolinensis_homolog_associated_gene_name'  'Anole lizard gene name' (default   False),\n u'acarolinensis_homolog_canonical_transcript_protein'  'Query protein or transcript ID' (default   False),\n u'acarolinensis_homolog_chrom_end' 'Anole lizard chromosome/scaffold end (bp)' (default    False),\n u'acarolinensis_homolog_chrom_start'   'Anole lizard chromosome/scaffold start (bp)' (default  False),\n u'acarolinensis_homolog_chromosome'    'Anole lizard chromosome/scaffold name' (default    False),\n u'acarolinensis_homolog_dn'    'dN with Anole lizard' (default False),\n u'acarolinensis_homolog_ds'    'dS with Anole lizard' (default False),\n u'acarolinensis_homolog_ensembl_gene'  'Anole lizard gene stable ID' (default  False),\n .\n .\n .\n\n\n\n\n\n\n\nqueryBM\n\n\nQueries BioMart.\n\n\nqueryBM(query_attributes,query_dataset,query_filter=None,query_items=None,query_dic=None,host=biomart_host)\n\n\n\n\nquery_attributes\n list of attributes to recover from BioMart\n\n\nquery_dataset\n dataset to query\n\n\nquery_filter\n one BioMart filter associated with the items being queried\n\n\nquery_items\n list of items to be queried (must assoiate with given filter)\n\n\nquery_querydic\n for complex queries this option should be used instead of 'filters' and 'items' and a dictionary of filters provided here eg. querydic={\"filter1\":[\"item1\",\"item2\"],\"filter2\":[\"item3\",\"item4\"]}. If using querydic, don't query more than 350 items at once.\n\n\n\n\nhost\n address of the host server, default='http://www.ensembl.org/biomart'\n\n\n\n\n\n\nreturns\n a Pandas dataframe of the queried attributes\n\n\n\n\n\n\n import AGEpy as age\n\n queryDf=queryBM(query_attributes=[\nensembl_gene_id\n,\nexternal_gene_name\n, \\\n                                  \ngo_id\n,\nname_1006\n,\ndefinition_1006\n],\\\n                query_dataset='hsapiens_gene_ensembl')\n\n print queryDf.head()\n\nensembl_gene_id external_gene_name       go_id            name_1006  \\\n0  ENSG00000283891             MIR628  GO:0005615  extracellular space   \n1  ENSG00000251931          RNU6-871P                                    \n2  ENSG00000207766             MIR626                                    \n3  ENSG00000275323         AC012314.7  GO:0003723          RNA binding   \n4  ENSG00000275323         AC012314.7  GO:0005634              nucleus   \n\n                                     definition_1006  \n0  \nThat part of a multicellular organism outside...\n  \n1                                                     \n2                                                     \n3  \nInteracting selectively and non-covalently wi...\n  \n4  \nA membrane-bounded organelle of eukaryotic ce...\n  \n\n\n\n\n\n\nFilterGOstring\n\n\nFilters GO terms based on given strings using ENSEMBL's biomart homology mapping.\n\n\nFilterGOstring(names_filter=[\"age-\", \"aging\", \"aged\", 'aging', 'aging.', 'aging,'], exclude_names=[\"packaging\",\"voltage\",\"cleavage-\", \"stage-1\",\"cage-like\",\"message-specific\", \"damage-associated\",\"stage-specific\",\"foraging\", \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"], defs_filter=[\" age-\", \" aging\", \" aged\", ' aging', ' aging.', ' aging,'], exclude_defs=[\"packaging\",\"voltage\",\"cleavage-\", \"stage-1\",\"cage-like\",\"message-specific\", \"damage-associated\",\"stage-specific\",\"foraging\", \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"], host=biomart_host, HSA=None,MUS=None,CEL=None,DMEL=None)\n\n\n\n\nnames_filter\n list of substrings to filter GO names on. Default=[\"age-\", \"aging\", \"aged\", 'aging', 'aging.', 'aging,']\n\n\nexclude_names\n list of substrings to be used for exclusion of GO names. Default=[\"packaging\",\"voltage\",\"cleavage-\",\n                       \"stage-1\",\"cage-like\",\"message-specific\",\n                       \"damage-associated\",\"stage-specific\",\"foraging\",\n                       \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"]\n\n\ndefs_filter\n list of substrings to filter GO defenitions on. Default=[\" age-\", \" aging\", \" aged\", ' aging', ' aging.', ' aging,']\n\n\nexclude_defs\n list of substrings to be used for exclustion of GO defenitions. Default=[\"packaging\",\"voltage\",\"cleavage-\",\n                         \"stage-1\",\"cage-like\",\"message-specific\",\n                         \"damage-associated\",\"stage-specific\",\"foraging\",\n                         \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"]\n\n\nhost\n biomart host server, default=\"http://www.ensembl.org/biomart\"\n\n\nHSA\n retrieved hsa dataframe\n\n\nMUS\n retrieved mus dataframe\n\n\nCEL\n retrieved cel dataframe\n\n\n\n\nDMEL\n retrieved dmel dataframe\n\n\n\n\n\n\nreturns\n  homology_df, HSA, MUS, CEL, DMEL\n\n\n\n\n\n\n import AGEpy as age\n\n homology_df, HSA, MUS, CEL, DMEL=age.FilterGOstring()\n\n print homology_df.head()\n\nHSA_ensembl_gene_id HSA_external_gene_name  \\\n0     ENSG00000000003                 TSPAN6   \n1     ENSG00000000005                   TNMD   \n2     ENSG00000000460               C1orf112   \n3     ENSG00000000971                    CFH   \n4     ENSG00000002079                  MYH16   \n\n                                         HSA_go_id  \\\n0  GO:0039532, , GO:0070062, GO:0016021, GO:00160...   \n1  GO:0005737, , GO:0016020, GO:0035990, GO:00717...   \n2                                                NaN   \n3  , GO:0030449, GO:0070062, GO:0045087, GO:00725...   \n4                                                NaN   \n\n                                     HSA_name_1006  \\\n0  , negative regulation of NIK/NF-kappaB signali...   \n1  , nuclear envelope, cytoplasm, negative regula...   \n2                                                NaN   \n3  , innate immune response, heparan sulfate prot...   \n4                                                NaN   \n\n                               HSA_definition_1006 MUS_ensembl_gene_id  \\\n0  \nThe component of a membrane consisting of the...\n  ENSMUSG00000067377   \n1  \nThe component of a membrane consisting of the...\n  ENSMUSG00000031250   \n2                                                NaN   ENSMUSG00000041406   \n3  \nInteracting selectively and non-covalently wi...\n                 NaN   \n4                                                NaN                  NaN   \n\nCEL_ensembl_gene_id DMEL_ensembl_gene_id MUS_external_gene_name  \\\n0                 NaN                  NaN                 Tspan6   \n1                 NaN                  NaN                   Tnmd   \n2                 NaN                  NaN               BC055324   \n3                 NaN                  NaN                   None   \n4                 NaN                  NaN                   None   \n\n                                         MUS_go_id   ...     \\\n0  GO:0039532, , GO:0070062, GO:0016021, GO:00160...   ...      \n1  GO:0016020, GO:0035990, GO:0071773, GO:0016021...   ...      \n2               GO:0005575, GO:0008150, GO:0003674,    ...      \n3                                               None   ...      \n4                                               None   ...      \n\n                               MUS_definition_1006 CEL_external_gene_name  \\\n0  \nThe component of a membrane consisting of the...\n                   None   \n1  \nThe component of a membrane consisting of the...\n                   None   \n2  \nElemental activities, such as catalysis or bi...\n                   None   \n3                                               None                    None   \n4                                               None                    None   \n\nCEL_go_id CEL_name_1006 CEL_definition_1006 DMEL_external_gene_name  \\\n0      None          None                None                    None   \n1      None          None                None                    None   \n2      None          None                None                    None   \n3      None          None                None                    None   \n4      None          None                None                    None   \n\nDMEL_go_id DMEL_name_1006 DMEL_definition_1006 evidence  \n0       None           None                 None      NaN  \n1       None           None                 None      NaN  \n2       None           None                 None      NaN  \n3       None           None                 None      NaN  \n4       None           None                 None      NaN  \n\n\n\n\n\nevidence\n indicates from which organisms there is evidence of the intended string", 
            "title": "biom"
        }, 
        {
            "location": "/modules/biom/#datasetsbm", 
            "text": "Lists BioMart datasets.  datasetsBM(host=biomart_host)   host  address of the host server, default='http://www.ensembl.org/biomart'  returns  nothing    import AGEpy as age  age.datasetsBM()\n\nu'acarolinensis_gene_ensembl'   Anole lizard genes (AnoCar2.0),\nu'acarolinensis_genomic_sequence'   Anole lizard sequences (AnoCar2.0),\nu'amelanoleuca_gene_ensembl'    Panda genes (ailMel1),\nu'amelanoleuca_genomic_sequence'    Panda sequences (ailMel1),\nu'amexicanus_gene_ensembl'  Cave fish genes (AstMex102),\nu'amexicanus_genomic_sequence'  Cave fish sequences (AstMex102),\nu'anancymaae_gene_ensembl'  Ma's night monkey genes (Anan_2.0),\nu'anancymaae_genomic_sequence'  Ma's night monkey sequences (Anan_2.0),\nu'aplatyrhynchos_gene_ensembl'  Duck genes (BGI_duck_1.0),\nu'aplatyrhynchos_genomic_sequence'  Duck sequences (BGI_duck_1.0),\nu'btaurus_gene_ensembl' Cow genes (UMD3.1),\nu'btaurus_genomic_sequence' Cow sequences (UMD3.1),\nu'btaurus_marker_end'   marker_feature_end,\nu'btaurus_marker_start' marker_feature,\nu'btaurus_qtl_feature'  qtl_feature,\n.\n.\n.", 
            "title": "datasetsBM"
        }, 
        {
            "location": "/modules/biom/#filtersbm", 
            "text": "Lists BioMart filters for a specific dataset.  filtersBM(dataset,host=biomart_host)   dataset  dataset to list filters of   host  address of the host server, default='http://www.ensembl.org/biomart'    returns  nothing     import AGEpy as age  age.filtersBM('hsapiens_gene_ensembl')\n\nu'affy_hc_g110' 'AFFY HC G110 probe ID(s) [e.g. 266_s_at]' (type    id_list, values []),\nu'affy_hg_focus'    'AFFY HG Focus probe ID(s) [e.g. 212481_s_at]' (type    id_list, values []),\nu'affy_hg_u133_plus_2'  'AFFY HG U133 Plus 2 probe ID(s) [e.g. 1553551_s_at]' (type id_list, values []),\nu'affy_hg_u133a'    'AFFY HG U133A probe ID(s) [e.g. 211600_at]' (type  id_list, values []),\nu'affy_hg_u133a_2'  'AFFY HG U133A 2 probe ID(s) [e.g. 211600_at]' (type    id_list, values []),\nu'affy_hg_u133b'    'AFFY HG U133B probe ID(s) [e.g. 224321_at]' (type  id_list, values []),\nu'affy_hg_u95a' 'AFFY HG U95A probe ID(s) [e.g. 33866_at]' (type    id_list, values []),\nu'affy_hg_u95av2'   'AFFY HG U95Av2 probe ID(s) [e.g. 33866_at]' (type  id_list, values []),\nu'affy_hg_u95b' 'AFFY HG U95B probe ID(s) [e.g. 48794_s_at]' (type  id_list, values []),\nu'affy_hg_u95c' 'AFFY HG U95C probe ID(s) [e.g. 66888_at]' (type    id_list, values []),\nu'affy_hg_u95d' 'AFFY HG U95D probe ID(s) [e.g. 70806_at]' (type    id_list, values []),\nu'affy_hg_u95e' 'AFFY HG U95E probe ID(s) [e.g. 88289_at]' (type    id_list, values []),\nu'affy_hta_2_0' 'AFFY HTA 2 0 probe ID(s) [e.g. TC04001102.hg]' (type   id_list, values []),\nu'affy_huex_1_0_st_v2'  'AFFY HuEx 1 0 st v2 probe ID(s) [e.g. 4037584]' (type  id_list, values []),\nu'affy_hugene_1_0_st_v1'    'AFFY HuGene 1 0 st v1 probe ID(s) [e.g. 8165644]' (type    id_list, values []),\nu'affy_hugene_2_0_st_v1'    'AFFY HuGene 2 0 st v1 probe ID(s) [e.g. 17100641]' (type   id_list, values []),\nu'affy_hugenefl'    'AFFY HuGeneFL probe ID(s) [e.g. Z70759_at]' (type  id_list, values []),\nu'affy_primeview'   'AFFY PrimeView probe ID(s) [e.g. 11761516_x_at]' (type id_list, values []),\n.\n.\n.", 
            "title": "filtersBM"
        }, 
        {
            "location": "/modules/biom/#attributesbm", 
            "text": "Lists BioMart attributes for a specific dataset.  attributesBM(dataset,host=biomart_host)   dataset  dataset to list attributes of   host  address of the host server, default='http://www.ensembl.org/biomart'    returns  nothing     import AGEpy as age  age.attributesBM('hsapiens_gene_ensembl')\n\nu'3_utr_end'    '3' UTR end' (default   False),\n u'3_utr_start' '3' UTR start' (default False),\n u'3utr'    '3' UTR' (default   False),\n u'5_utr_end'   '5' UTR end' (default   False),\n u'5_utr_start' '5' UTR start' (default False),\n u'5utr'    '5' UTR' (default   False),\n u'acarolinensis_homolog_associated_gene_name'  'Anole lizard gene name' (default   False),\n u'acarolinensis_homolog_canonical_transcript_protein'  'Query protein or transcript ID' (default   False),\n u'acarolinensis_homolog_chrom_end' 'Anole lizard chromosome/scaffold end (bp)' (default    False),\n u'acarolinensis_homolog_chrom_start'   'Anole lizard chromosome/scaffold start (bp)' (default  False),\n u'acarolinensis_homolog_chromosome'    'Anole lizard chromosome/scaffold name' (default    False),\n u'acarolinensis_homolog_dn'    'dN with Anole lizard' (default False),\n u'acarolinensis_homolog_ds'    'dS with Anole lizard' (default False),\n u'acarolinensis_homolog_ensembl_gene'  'Anole lizard gene stable ID' (default  False),\n .\n .\n .", 
            "title": "attributesBM"
        }, 
        {
            "location": "/modules/biom/#querybm", 
            "text": "Queries BioMart.  queryBM(query_attributes,query_dataset,query_filter=None,query_items=None,query_dic=None,host=biomart_host)   query_attributes  list of attributes to recover from BioMart  query_dataset  dataset to query  query_filter  one BioMart filter associated with the items being queried  query_items  list of items to be queried (must assoiate with given filter)  query_querydic  for complex queries this option should be used instead of 'filters' and 'items' and a dictionary of filters provided here eg. querydic={\"filter1\":[\"item1\",\"item2\"],\"filter2\":[\"item3\",\"item4\"]}. If using querydic, don't query more than 350 items at once.   host  address of the host server, default='http://www.ensembl.org/biomart'    returns  a Pandas dataframe of the queried attributes     import AGEpy as age  queryDf=queryBM(query_attributes=[ ensembl_gene_id , external_gene_name , \\\n                                   go_id , name_1006 , definition_1006 ],\\\n                query_dataset='hsapiens_gene_ensembl')  print queryDf.head()\n\nensembl_gene_id external_gene_name       go_id            name_1006  \\\n0  ENSG00000283891             MIR628  GO:0005615  extracellular space   \n1  ENSG00000251931          RNU6-871P                                    \n2  ENSG00000207766             MIR626                                    \n3  ENSG00000275323         AC012314.7  GO:0003723          RNA binding   \n4  ENSG00000275323         AC012314.7  GO:0005634              nucleus   \n\n                                     definition_1006  \n0   That part of a multicellular organism outside...   \n1                                                     \n2                                                     \n3   Interacting selectively and non-covalently wi...   \n4   A membrane-bounded organelle of eukaryotic ce...", 
            "title": "queryBM"
        }, 
        {
            "location": "/modules/biom/#filtergostring", 
            "text": "Filters GO terms based on given strings using ENSEMBL's biomart homology mapping.  FilterGOstring(names_filter=[\"age-\", \"aging\", \"aged\", 'aging', 'aging.', 'aging,'], exclude_names=[\"packaging\",\"voltage\",\"cleavage-\", \"stage-1\",\"cage-like\",\"message-specific\", \"damage-associated\",\"stage-specific\",\"foraging\", \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"], defs_filter=[\" age-\", \" aging\", \" aged\", ' aging', ' aging.', ' aging,'], exclude_defs=[\"packaging\",\"voltage\",\"cleavage-\", \"stage-1\",\"cage-like\",\"message-specific\", \"damage-associated\",\"stage-specific\",\"foraging\", \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"], host=biomart_host, HSA=None,MUS=None,CEL=None,DMEL=None)   names_filter  list of substrings to filter GO names on. Default=[\"age-\", \"aging\", \"aged\", 'aging', 'aging.', 'aging,']  exclude_names  list of substrings to be used for exclusion of GO names. Default=[\"packaging\",\"voltage\",\"cleavage-\",\n                       \"stage-1\",\"cage-like\",\"message-specific\",\n                       \"damage-associated\",\"stage-specific\",\"foraging\",\n                       \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"]  defs_filter  list of substrings to filter GO defenitions on. Default=[\" age-\", \" aging\", \" aged\", ' aging', ' aging.', ' aging,']  exclude_defs  list of substrings to be used for exclustion of GO defenitions. Default=[\"packaging\",\"voltage\",\"cleavage-\",\n                         \"stage-1\",\"cage-like\",\"message-specific\",\n                         \"damage-associated\",\"stage-specific\",\"foraging\",\n                         \"DNA-damaging\",\"engaging\",\"damaged\",\"packaged\"]  host  biomart host server, default=\"http://www.ensembl.org/biomart\"  HSA  retrieved hsa dataframe  MUS  retrieved mus dataframe  CEL  retrieved cel dataframe   DMEL  retrieved dmel dataframe    returns   homology_df, HSA, MUS, CEL, DMEL     import AGEpy as age  homology_df, HSA, MUS, CEL, DMEL=age.FilterGOstring()  print homology_df.head()\n\nHSA_ensembl_gene_id HSA_external_gene_name  \\\n0     ENSG00000000003                 TSPAN6   \n1     ENSG00000000005                   TNMD   \n2     ENSG00000000460               C1orf112   \n3     ENSG00000000971                    CFH   \n4     ENSG00000002079                  MYH16   \n\n                                         HSA_go_id  \\\n0  GO:0039532, , GO:0070062, GO:0016021, GO:00160...   \n1  GO:0005737, , GO:0016020, GO:0035990, GO:00717...   \n2                                                NaN   \n3  , GO:0030449, GO:0070062, GO:0045087, GO:00725...   \n4                                                NaN   \n\n                                     HSA_name_1006  \\\n0  , negative regulation of NIK/NF-kappaB signali...   \n1  , nuclear envelope, cytoplasm, negative regula...   \n2                                                NaN   \n3  , innate immune response, heparan sulfate prot...   \n4                                                NaN   \n\n                               HSA_definition_1006 MUS_ensembl_gene_id  \\\n0   The component of a membrane consisting of the...   ENSMUSG00000067377   \n1   The component of a membrane consisting of the...   ENSMUSG00000031250   \n2                                                NaN   ENSMUSG00000041406   \n3   Interacting selectively and non-covalently wi...                  NaN   \n4                                                NaN                  NaN   \n\nCEL_ensembl_gene_id DMEL_ensembl_gene_id MUS_external_gene_name  \\\n0                 NaN                  NaN                 Tspan6   \n1                 NaN                  NaN                   Tnmd   \n2                 NaN                  NaN               BC055324   \n3                 NaN                  NaN                   None   \n4                 NaN                  NaN                   None   \n\n                                         MUS_go_id   ...     \\\n0  GO:0039532, , GO:0070062, GO:0016021, GO:00160...   ...      \n1  GO:0016020, GO:0035990, GO:0071773, GO:0016021...   ...      \n2               GO:0005575, GO:0008150, GO:0003674,    ...      \n3                                               None   ...      \n4                                               None   ...      \n\n                               MUS_definition_1006 CEL_external_gene_name  \\\n0   The component of a membrane consisting of the...                    None   \n1   The component of a membrane consisting of the...                    None   \n2   Elemental activities, such as catalysis or bi...                    None   \n3                                               None                    None   \n4                                               None                    None   \n\nCEL_go_id CEL_name_1006 CEL_definition_1006 DMEL_external_gene_name  \\\n0      None          None                None                    None   \n1      None          None                None                    None   \n2      None          None                None                    None   \n3      None          None                None                    None   \n4      None          None                None                    None   \n\nDMEL_go_id DMEL_name_1006 DMEL_definition_1006 evidence  \n0       None           None                 None      NaN  \n1       None           None                 None      NaN  \n2       None           None                 None      NaN  \n3       None           None                 None      NaN  \n4       None           None                 None      NaN    evidence  indicates from which organisms there is evidence of the intended string", 
            "title": "FilterGOstring"
        }, 
        {
            "location": "/modules/cytoscape/", 
            "text": "checkCytoscapeVersion\n\n\nChecks cytoscape version.\n\n\nCheckResponse(r)\n\n\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, defaul=cytoscape_port\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n age.checkCytoscapeVersion()\n\ncytoscapeVersion 3.6.0\napiVersion v1\n\n\n\n\n\n\ncytoscape\n\n\nGeneral function for interacting with Cytoscape API.\n\n\ncytoscape(namespace,command=\"\",PARAMS={},host=cytoscape_host,port=cytoscape_port,method=\"POST\",verbose=False)\n\n\n\n\nnamespace\n namespace where the request should be executed. eg. \"string\"\n\n\ncommnand\n command to execute. eg. \"protein query\"\n\n\nPARAMs\n a dictionary with the parameters. Check your swagger normaly running on\n'http://localhost:1234/v1/swaggerUI/swagger-ui/index.html?url=http://localhost:1234/v1/commands/swagger.json'\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, default=cytoscape_port\n\n\nmethod\n type of http call, ie. \"POST\" or \"GET\" or \"HELP\".\n\n\nverbose\n print more information\n\n\nreturns\n For \"POST\" the data in the content's response. For \"GET\" None.\n\n\n\n\n import AGEpy as age\n\n response=age.cytoscape(\nstring\n,\npubmed query\n,{\npubmed\n:\np53 p21\n,\nlimit\n:\n50\n})\n\n print response\n\n{u'SUID': 37560}\n\n\n\n\n\n\nresult\n\n\nDisplays the current network.\n\n\nresult(filetype=\"PNG\", saveas=None, host=cytoscape_host, port=cytoscape_port)\n\n\n\n\nfiletype\n file type, default=\"PNG\"\n\n\nsaveas\n /path/to/non/tmp/file.prefix\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, default=cytoscape_port\n\n\nreturns\n an image\n\n\n\n\n import AGEpy as age\n\n response=age.result()\n\n response\n\n\n\n\n\n\n\n\ngetTableColumns\n\n\nGets tables from cytoscape.\n\n\ngetTableColumns(table, columns, namespace = \"default\", network = \"current\", host=cytoscape_host,port=cytoscape_port,verbose=False)\n\n\n\n\ntable\n table to retrieve eg. node\n\n\ncolumns\n columns to retrieve in list format\n\n\nnamespace\n namepsace, default=\"default\"\n\n\nnetwork\n a network name or id, default=\"current\"\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, default=cytoscape_port\n\n\nverbose\n print more information\n\n\nreturns\n a pandas dataframe\n\n\n\n\n import AGEpy as age\n\n response=age.getTableColumns('node',['display name'])\n\n print response\n\n                     display name\n9606.ENSP00000367207          MYC\n9606.ENSP00000356150         MDM4\n9606.ENSP00000228872       CDKN1B\n9606.ENSP00000361021         PTEN\n9606.ENSP00000265734         CDK6\n\n\n\n\n\n\nloadTableData\n\n\nLoads tables into cytoscape.\n\n\nloadTableData(df, df_key='index',table=\"node\", table_key_column = \"name\", network=\"current\", namespace=\"default\", host=cytoscape_host, port=cytoscape_port, verbose=False)\n\n\n\n\ndf\n a pandas dataframe to load\n\n\ndf_key\n key column in df, defaul=\"index\"\n\n\ntable\n target table, default=\"node\"\n\n\ntable_key_column\n table key column, default=\"name\"\n\n\nnetwork\n a network name or id, default=\"current\"\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, default=cytoscape_port\n\n\nverbose\n print more information\n\n\nreturns\n output of put request\n\n\n\n\n import AGEpy as age\n\n print df.head()\n\n                     display name\n9606.ENSP00000367207          MYC\n9606.ENSP00000356150         MDM4\n9606.ENSP00000228872       CDKN1B\n9606.ENSP00000361021         PTEN\n9606.ENSP00000265734         CDK6\n\n\n def MarkCKDs(x):\n...    if \nCDK\n in x:\n...        res=\nyes\n\n...    else:\n...        res=\nnot\n\n...    return res\n\n df[\nCDK\n]=df[\ndisplay name\n].apply( lambda x: MarkCKDs(x) )\n\n print df.head()\n\n                     display name  CDK\n9606.ENSP00000367207          MYC  not\n9606.ENSP00000356150         MDM4  not\n9606.ENSP00000228872       CDKN1B  yes\n9606.ENSP00000361021         PTEN  not\n9606.ENSP00000265734         CDK6  yes\n\n\n response=age.loadTableData(df[[\nCDK\n]])\n\n\n\n\n\n\nsimple_defaults\n\n\nSimplifies default layouts.\n\n\nsimple_defaults(defaults_dic)\n\n\n\n\ndefaults_dic\n a dictionary of the form { visualProperty_A:value_A, visualProperty_B:value_B, ..}\n\n\nreturns\n a list of dictionaries with each item corresponding to a given key in defaults_dic\n\n\n\n\n import AGEpy as age\n\n defaults_dic={\nNODE_SHAPE\n:\nellipse\n,\\\n                  \nNODE_SIZE\n:60,\\\n                  \nNODE_FILL_COLOR\n:\n#AAAAAA\n,\\\n                  \nEDGE_TRANSPARENCY\n:120}\n\n defaults_list=age.simple_defaults(defaults_dic)\n\n print defaults_list\n\n[{'visualProperty': 'NODE_SIZE', 'value': 60}, \\\n{'visualProperty': 'NODE_FILL_COLOR', 'value': '#AAAAAA'}, \\\n{'visualProperty': 'NODE_SHAPE', 'value': 'ellipse'}, \\\n{'visualProperty': 'EDGE_TRANSPARENCY', 'value': 120}]\n\n\n\n\n\n\ncreate_styles\n\n\nCreates a new visual style.\n\n\ncreate_styles(title,defaults=None,mappings=None,host=cytoscape_host,port=cytoscape_port)\n\n\n\n\ntitle\n title of the visual style\n\n\ndefaults\n a list of dictionaries for each visualProperty\n\n\nmappings\n a list of dictionaries for each visualProperty\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, default=cytoscape_port\n\n\nretunrs\n nothing\n\n\n\n\n import AGEpy as age\n\n print defaults_list\n\n[{'visualProperty': 'NODE_SIZE', 'value': 60}, \\\n{'visualProperty': 'NODE_FILL_COLOR', 'value': '#AAAAAA'}, \\\n{'visualProperty': 'NODE_SHAPE', 'value': 'ellipse'}, \\\n{'visualProperty': 'EDGE_TRANSPARENCY', 'value': 120}]\n\n\n response=age.create_styles(\nnewStyle\n,defaults=defaults_list)\n\n\n\n\n\n\nupdate_style\n\n\nUpdates a visual style.\n\n\nupdate_style(title, defaults=None, mappings=None, host=cytoscape_host, port=cytoscape_port, verbose=False)\n\n\n\n\ntitle\n title of the visual style\n\n\ndefaults\n a list of dictionaries for each visualProperty\n\n\nmappings\n a list of dictionaries for each visualProperty\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, default=cytoscape_port\n\n\nretunrs\n nothing\n\n\n\n\n import AGEpy as age\n\n print new_defaults_list\n\n[{'visualProperty': 'NODE_SIZE', 'value': 80}, \\\n{'visualProperty': 'NODE_FILL_COLOR', 'value': '#AAAAAA'}, \\\n{'visualProperty': 'NODE_SHAPE', 'value': 'ellipse'}, \\\n{'visualProperty': 'EDGE_TRANSPARENCY', 'value': 120}]\n\n\n response=age.update_style(\nnewStyle\n,defaults=defaults_list)\n\n\n\n\n\n\nmapVisualProperty\n\n\nGenerates a dictionary for a given visual property\n\n\nmapVisualProperty(visualProperty, mappingType, mappingColumn, lower=None,center=None,upper=None, discrete=None, network=\"current\",table=\"node\", namespace=\"default\", host=cytoscape_host, port=cytoscape_port, verbose=False)\n\n\n\n\nvisualProperty\n visualProperty\n\n\nmappingType\n mappingType\n\n\nmappingColumn\n mappingColumn\n\n\nlower\n for \"continuous\" mappings a list of the form [value,rgb_string]\n\n\ncenter\n for \"continuous\" mappings a list of the form [value,rgb_string]\n\n\nupper\n for \"continuous\" mappings a list of the form [value,rgb_string]\n\n\ndiscrete\n for discrete mappings, a list of lists of the form [ list_of_keys, list_of_values ]\n\n\nnetwork\n a network name or id, default=\"current\"\n\n\nhost\n cytoscape host address, default=cytoscape_host\n\n\nport\n cytoscape port, default=cytoscape_port\n\n\nretunrs\n a dictionary for the respective visual property\n\n\n\n\n import AGEpy as age\n\n import matplotlib\n\n\n NODE_LABEL=age.mapVisualProperty(\nNODE_LABEL\n,\npassthrough\n,\ndisplay name\n)\n\n print NODE_LABEL\n\n{'mappingType': 'passthrough', 'visualProperty': 'NODE_LABEL', 'mappingColumnType': u'String', 'mappingColumn': 'display name'}\n\n\n NODE_SHAPE=age.mapVisualProperty('NODE_SHAPE','discrete','CDK',\\\n                                     discrete=[ [\nyes\n,\nnot\n], \\\n                                     [\nDIAMOND\n, \nellipse\n] ])\n\n\n NODE_SIZE=age.mapVisualProperty('NODE_SIZE','discrete','CDK',\\\n                                    discrete=[ [\nyes\n,\nnot\n],\\\n                                    [\n100.0\n,\n60.0\n] ])\n\n# imagine you have a log2(fold_change) column in your cytoscape table\n\n cmap = matplotlib.cm.get_cmap(\nbwr\n)\n\n norm = matplotlib.colors.Normalize(vmin=-4, vmax=4)\n\n min_color=matplotlib.colors.rgb2hex(cmap(norm(-4)))\n\n center_color=matplotlib.colors.rgb2hex(cmap(norm(0)))\n\n max_color=matplotlib.colors.rgb2hex(cmap(norm(4)))  \n\n NODE_FILL_COLOR=age.mapVisualProperty('NODE_FILL_COLOR','continuous','log2(fold_change)',\\\n                                      lower=[-4,min_color],center=[0.0,center_color],upper=[4,max_color])\n\n\n\n\n\n\naDiffCytoscape\n\n\nPlots tables from aDiff/cuffdiff into cytoscape using String protein queries.\nUses top changed genes as well as first neighbours and difusion fo generate subnetworks.\n\n\naDiffCytoscape(df, aging_genes, target, species=\"caenorhabditis elegans\", limit=None, cutoff=0.4, taxon=None, cytoscape_host=cytoscape_host, cytoscape_port=cytoscape_port)\n\n\n\n\ndf\n  df as outputed by aDiff for differential gene expression\n\n\naging_genes\n ENS gene ids to be labeled with a diagonal\n\n\ntarget\n target destination for saving files without prefix. eg. \"/beegfs/group_bit/home/JBoucas/test/N2_vs_daf2\"\n\n\nspecies\n species for string app query. eg. \"caenorhabditis elegans\", \"drosophila melanogaster\", \"mus musculus\", \"homo sapiens\"\n\n\nlimit\n limit for string app query. Number of extra genes to recover. If None, limit=N(query_genes)*.25\n\n\ncuttoff\n confidence cuttoff for sting app query. Default=0.4\n\n\ntaxon\n taxon id for string app query. For the species shown above, taxon id will be automatically identified\n\n\ncytoscape_host\n host address for cytoscape, default=cytoscape_host\n\n\ncytoscape_port\n cytoscape port, defaut=cytoscape_port\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n print genes[:10]\n\n['WBGene00008288', 'WBGene00002169', 'WBGene00008733', 'WBGene00004178', 'WBGene00004178', 'WBGene00004179', 'WBGene00004179', 'WBGene00020581', 'WBGene00001877', 'WBGene00001881']\n\n\n print df.head()\n\nensembl_gene_id            gene            locus sample_1 sample_2 status  \\\n0  WBGene00022275        Y74C9A.1    I:43732-44677       N2     daf2     OK   \n1  WBGene00004418  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n2  WBGene00018774  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n3  WBGene00018772        F53G12.4  I:134336-137282       N2     daf2     OK   \n4  WBGene00018958        F56C11.6  I:171339-175991       N2     daf2     OK   \n\n     value_1      value_2  log2(fold_change)  test_stat  p_value   q_value  \\\n0     0.195901     0.986634           2.332390    2.32959  0.00570  0.031216   \n1  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n2  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n3     1.235670     2.992460           1.276040    3.16508  0.00005  0.000556   \n4     2.651180     3.795600           0.517696    1.73994  0.00410  0.024157   \n\nsignificant                                              GO_id  \\\n0         yes                                                NaN   \n1         yes  GO:0003735; GO:0000463; GO:0044822; GO:0002181...   \n2         yes                                                NaN   \n3         yes                                                NaN   \n4         yes                 GO:0016787; GO:0005615; GO:0004104   \n\n                                           GO_term    gene_biotype  \\\n0                                                NaN  protein_coding   \n1  structural constituent of ribosome; maturation...  protein_coding   \n2                                                NaN  protein_coding   \n3                                                NaN  protein_coding   \n4  hydrolase activity; extracellular space; choli...  protein_coding   \n\n  NormInt evidence  \n0 -0.356904       no  \n1  3.458609       no  \n2  3.458609       no  \n3  0.283965       no  \n4  0.501360       no  \n\n\n age.aDiffCytoscape(df,genes,\n/u/home/JBoucas/cytoscape/cyto\n)", 
            "title": "cytoscape"
        }, 
        {
            "location": "/modules/cytoscape/#checkcytoscapeversion", 
            "text": "Checks cytoscape version.  CheckResponse(r)   host  cytoscape host address, default=cytoscape_host  port  cytoscape port, defaul=cytoscape_port  returns  nothing    import AGEpy as age  age.checkCytoscapeVersion()\n\ncytoscapeVersion 3.6.0\napiVersion v1", 
            "title": "checkCytoscapeVersion"
        }, 
        {
            "location": "/modules/cytoscape/#cytoscape", 
            "text": "General function for interacting with Cytoscape API.  cytoscape(namespace,command=\"\",PARAMS={},host=cytoscape_host,port=cytoscape_port,method=\"POST\",verbose=False)   namespace  namespace where the request should be executed. eg. \"string\"  commnand  command to execute. eg. \"protein query\"  PARAMs  a dictionary with the parameters. Check your swagger normaly running on\n'http://localhost:1234/v1/swaggerUI/swagger-ui/index.html?url=http://localhost:1234/v1/commands/swagger.json'  host  cytoscape host address, default=cytoscape_host  port  cytoscape port, default=cytoscape_port  method  type of http call, ie. \"POST\" or \"GET\" or \"HELP\".  verbose  print more information  returns  For \"POST\" the data in the content's response. For \"GET\" None.    import AGEpy as age  response=age.cytoscape( string , pubmed query ,{ pubmed : p53 p21 , limit : 50 })  print response\n\n{u'SUID': 37560}", 
            "title": "cytoscape"
        }, 
        {
            "location": "/modules/cytoscape/#result", 
            "text": "Displays the current network.  result(filetype=\"PNG\", saveas=None, host=cytoscape_host, port=cytoscape_port)   filetype  file type, default=\"PNG\"  saveas  /path/to/non/tmp/file.prefix  host  cytoscape host address, default=cytoscape_host  port  cytoscape port, default=cytoscape_port  returns  an image    import AGEpy as age  response=age.result()  response", 
            "title": "result"
        }, 
        {
            "location": "/modules/cytoscape/#gettablecolumns", 
            "text": "Gets tables from cytoscape.  getTableColumns(table, columns, namespace = \"default\", network = \"current\", host=cytoscape_host,port=cytoscape_port,verbose=False)   table  table to retrieve eg. node  columns  columns to retrieve in list format  namespace  namepsace, default=\"default\"  network  a network name or id, default=\"current\"  host  cytoscape host address, default=cytoscape_host  port  cytoscape port, default=cytoscape_port  verbose  print more information  returns  a pandas dataframe    import AGEpy as age  response=age.getTableColumns('node',['display name'])  print response\n\n                     display name\n9606.ENSP00000367207          MYC\n9606.ENSP00000356150         MDM4\n9606.ENSP00000228872       CDKN1B\n9606.ENSP00000361021         PTEN\n9606.ENSP00000265734         CDK6", 
            "title": "getTableColumns"
        }, 
        {
            "location": "/modules/cytoscape/#loadtabledata", 
            "text": "Loads tables into cytoscape.  loadTableData(df, df_key='index',table=\"node\", table_key_column = \"name\", network=\"current\", namespace=\"default\", host=cytoscape_host, port=cytoscape_port, verbose=False)   df  a pandas dataframe to load  df_key  key column in df, defaul=\"index\"  table  target table, default=\"node\"  table_key_column  table key column, default=\"name\"  network  a network name or id, default=\"current\"  host  cytoscape host address, default=cytoscape_host  port  cytoscape port, default=cytoscape_port  verbose  print more information  returns  output of put request    import AGEpy as age  print df.head()\n\n                     display name\n9606.ENSP00000367207          MYC\n9606.ENSP00000356150         MDM4\n9606.ENSP00000228872       CDKN1B\n9606.ENSP00000361021         PTEN\n9606.ENSP00000265734         CDK6  def MarkCKDs(x):\n...    if  CDK  in x:\n...        res= yes \n...    else:\n...        res= not \n...    return res  df[ CDK ]=df[ display name ].apply( lambda x: MarkCKDs(x) )  print df.head()\n\n                     display name  CDK\n9606.ENSP00000367207          MYC  not\n9606.ENSP00000356150         MDM4  not\n9606.ENSP00000228872       CDKN1B  yes\n9606.ENSP00000361021         PTEN  not\n9606.ENSP00000265734         CDK6  yes  response=age.loadTableData(df[[ CDK ]])", 
            "title": "loadTableData"
        }, 
        {
            "location": "/modules/cytoscape/#simple_defaults", 
            "text": "Simplifies default layouts.  simple_defaults(defaults_dic)   defaults_dic  a dictionary of the form { visualProperty_A:value_A, visualProperty_B:value_B, ..}  returns  a list of dictionaries with each item corresponding to a given key in defaults_dic    import AGEpy as age  defaults_dic={ NODE_SHAPE : ellipse ,\\\n                   NODE_SIZE :60,\\\n                   NODE_FILL_COLOR : #AAAAAA ,\\\n                   EDGE_TRANSPARENCY :120}  defaults_list=age.simple_defaults(defaults_dic)  print defaults_list\n\n[{'visualProperty': 'NODE_SIZE', 'value': 60}, \\\n{'visualProperty': 'NODE_FILL_COLOR', 'value': '#AAAAAA'}, \\\n{'visualProperty': 'NODE_SHAPE', 'value': 'ellipse'}, \\\n{'visualProperty': 'EDGE_TRANSPARENCY', 'value': 120}]", 
            "title": "simple_defaults"
        }, 
        {
            "location": "/modules/cytoscape/#create_styles", 
            "text": "Creates a new visual style.  create_styles(title,defaults=None,mappings=None,host=cytoscape_host,port=cytoscape_port)   title  title of the visual style  defaults  a list of dictionaries for each visualProperty  mappings  a list of dictionaries for each visualProperty  host  cytoscape host address, default=cytoscape_host  port  cytoscape port, default=cytoscape_port  retunrs  nothing    import AGEpy as age  print defaults_list\n\n[{'visualProperty': 'NODE_SIZE', 'value': 60}, \\\n{'visualProperty': 'NODE_FILL_COLOR', 'value': '#AAAAAA'}, \\\n{'visualProperty': 'NODE_SHAPE', 'value': 'ellipse'}, \\\n{'visualProperty': 'EDGE_TRANSPARENCY', 'value': 120}]  response=age.create_styles( newStyle ,defaults=defaults_list)", 
            "title": "create_styles"
        }, 
        {
            "location": "/modules/cytoscape/#update_style", 
            "text": "Updates a visual style.  update_style(title, defaults=None, mappings=None, host=cytoscape_host, port=cytoscape_port, verbose=False)   title  title of the visual style  defaults  a list of dictionaries for each visualProperty  mappings  a list of dictionaries for each visualProperty  host  cytoscape host address, default=cytoscape_host  port  cytoscape port, default=cytoscape_port  retunrs  nothing    import AGEpy as age  print new_defaults_list\n\n[{'visualProperty': 'NODE_SIZE', 'value': 80}, \\\n{'visualProperty': 'NODE_FILL_COLOR', 'value': '#AAAAAA'}, \\\n{'visualProperty': 'NODE_SHAPE', 'value': 'ellipse'}, \\\n{'visualProperty': 'EDGE_TRANSPARENCY', 'value': 120}]  response=age.update_style( newStyle ,defaults=defaults_list)", 
            "title": "update_style"
        }, 
        {
            "location": "/modules/cytoscape/#mapvisualproperty", 
            "text": "Generates a dictionary for a given visual property  mapVisualProperty(visualProperty, mappingType, mappingColumn, lower=None,center=None,upper=None, discrete=None, network=\"current\",table=\"node\", namespace=\"default\", host=cytoscape_host, port=cytoscape_port, verbose=False)   visualProperty  visualProperty  mappingType  mappingType  mappingColumn  mappingColumn  lower  for \"continuous\" mappings a list of the form [value,rgb_string]  center  for \"continuous\" mappings a list of the form [value,rgb_string]  upper  for \"continuous\" mappings a list of the form [value,rgb_string]  discrete  for discrete mappings, a list of lists of the form [ list_of_keys, list_of_values ]  network  a network name or id, default=\"current\"  host  cytoscape host address, default=cytoscape_host  port  cytoscape port, default=cytoscape_port  retunrs  a dictionary for the respective visual property    import AGEpy as age  import matplotlib  NODE_LABEL=age.mapVisualProperty( NODE_LABEL , passthrough , display name )  print NODE_LABEL\n\n{'mappingType': 'passthrough', 'visualProperty': 'NODE_LABEL', 'mappingColumnType': u'String', 'mappingColumn': 'display name'}  NODE_SHAPE=age.mapVisualProperty('NODE_SHAPE','discrete','CDK',\\\n                                     discrete=[ [ yes , not ], \\\n                                     [ DIAMOND ,  ellipse ] ])  NODE_SIZE=age.mapVisualProperty('NODE_SIZE','discrete','CDK',\\\n                                    discrete=[ [ yes , not ],\\\n                                    [ 100.0 , 60.0 ] ])\n\n# imagine you have a log2(fold_change) column in your cytoscape table  cmap = matplotlib.cm.get_cmap( bwr )  norm = matplotlib.colors.Normalize(vmin=-4, vmax=4)  min_color=matplotlib.colors.rgb2hex(cmap(norm(-4)))  center_color=matplotlib.colors.rgb2hex(cmap(norm(0)))  max_color=matplotlib.colors.rgb2hex(cmap(norm(4)))    NODE_FILL_COLOR=age.mapVisualProperty('NODE_FILL_COLOR','continuous','log2(fold_change)',\\\n                                      lower=[-4,min_color],center=[0.0,center_color],upper=[4,max_color])", 
            "title": "mapVisualProperty"
        }, 
        {
            "location": "/modules/cytoscape/#adiffcytoscape", 
            "text": "Plots tables from aDiff/cuffdiff into cytoscape using String protein queries.\nUses top changed genes as well as first neighbours and difusion fo generate subnetworks.  aDiffCytoscape(df, aging_genes, target, species=\"caenorhabditis elegans\", limit=None, cutoff=0.4, taxon=None, cytoscape_host=cytoscape_host, cytoscape_port=cytoscape_port)   df   df as outputed by aDiff for differential gene expression  aging_genes  ENS gene ids to be labeled with a diagonal  target  target destination for saving files without prefix. eg. \"/beegfs/group_bit/home/JBoucas/test/N2_vs_daf2\"  species  species for string app query. eg. \"caenorhabditis elegans\", \"drosophila melanogaster\", \"mus musculus\", \"homo sapiens\"  limit  limit for string app query. Number of extra genes to recover. If None, limit=N(query_genes)*.25  cuttoff  confidence cuttoff for sting app query. Default=0.4  taxon  taxon id for string app query. For the species shown above, taxon id will be automatically identified  cytoscape_host  host address for cytoscape, default=cytoscape_host  cytoscape_port  cytoscape port, defaut=cytoscape_port  returns  nothing    import AGEpy as age  print genes[:10]\n\n['WBGene00008288', 'WBGene00002169', 'WBGene00008733', 'WBGene00004178', 'WBGene00004178', 'WBGene00004179', 'WBGene00004179', 'WBGene00020581', 'WBGene00001877', 'WBGene00001881']  print df.head()\n\nensembl_gene_id            gene            locus sample_1 sample_2 status  \\\n0  WBGene00022275        Y74C9A.1    I:43732-44677       N2     daf2     OK   \n1  WBGene00004418  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n2  WBGene00018774  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n3  WBGene00018772        F53G12.4  I:134336-137282       N2     daf2     OK   \n4  WBGene00018958        F56C11.6  I:171339-175991       N2     daf2     OK   \n\n     value_1      value_2  log2(fold_change)  test_stat  p_value   q_value  \\\n0     0.195901     0.986634           2.332390    2.32959  0.00570  0.031216   \n1  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n2  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n3     1.235670     2.992460           1.276040    3.16508  0.00005  0.000556   \n4     2.651180     3.795600           0.517696    1.73994  0.00410  0.024157   \n\nsignificant                                              GO_id  \\\n0         yes                                                NaN   \n1         yes  GO:0003735; GO:0000463; GO:0044822; GO:0002181...   \n2         yes                                                NaN   \n3         yes                                                NaN   \n4         yes                 GO:0016787; GO:0005615; GO:0004104   \n\n                                           GO_term    gene_biotype  \\\n0                                                NaN  protein_coding   \n1  structural constituent of ribosome; maturation...  protein_coding   \n2                                                NaN  protein_coding   \n3                                                NaN  protein_coding   \n4  hydrolase activity; extracellular space; choli...  protein_coding   \n\n  NormInt evidence  \n0 -0.356904       no  \n1  3.458609       no  \n2  3.458609       no  \n3  0.283965       no  \n4  0.501360       no    age.aDiffCytoscape(df,genes, /u/home/JBoucas/cytoscape/cyto )", 
            "title": "aDiffCytoscape"
        }, 
        {
            "location": "/modules/david/", 
            "text": "DAVIDenrich\n\n\nQueries the DAVID database for an enrichment analysis.\nCheck https://david.ncifcrf.gov/content.jsp?file=DAVID_API.html for database == \"type\" tag and categories ==  \"annot\" tag.\n\n\nDAVIDenrich(database, categories, user, ids, ids_bg = None, name = '', name_bg = '', verbose = False, p = 0.1, n = 2)\n\n\n\n\ndatabase\n A string for the database to query, e.g. 'WORMBASE_GENE_ID'\n\n\ncategories\n A comma separated string with databases\n\n\nuser\n  A user ID registered at DAVID for querying\n\n\nids\n  A list with identifiers\n\n\nname\n  A string with the name for the query set\n\n\nids_bg\n  A list with the background identifiers to enrich against, 'None' for whole set\n\n\nname_bg\n  A string with the name for the background set\n\n\np\n  Maximum p value for enrichment of a term\n\n\nn\n  Minimum number of genes within a term\n\n\nct\n  Maybe another threshold\n\n\nreturns\n  None if no ids match the queried database, or a pandas dataframe with results\n\n\n\n\n import AGEpy as age\n\n print sigGenes[:10]\n\n[u'WBGene00022275', u'WBGene00004418', u'WBGene00018774',\n u'WBGene00018772', u'WBGene00018958', u'WBGene00021662',\n u'WBGene00255594', u'WBGene00021658', u'WBGene00021026',\n u'WBGene00022042']\n\n\n categories=['GOTERM_BP_FAT', 'GOTERM_CC_FAT', 'GOTERM_MF_FAT', 'KEGG_PATHWAY','BIOCARTA', 'PFAM', 'PROSITE' ]\n\n DAVIDdf=age.DAVIDenrich('WORMBASE_GENE_ID', categories, 'email.registered@david.com', sigGenes)\n\n print DAVIDdf.head()\n\ncategoryName                                     termName listHits  \\\n0  GOTERM_BP_FAT                       GO:0006412~translation      177   \n1  GOTERM_BP_FAT         GO:0006518~peptide metabolic process      198   \n2  GOTERM_BP_FAT      GO:0043043~peptide biosynthetic process      177   \n3  GOTERM_BP_FAT        GO:0043604~amide biosynthetic process      180   \n4  GOTERM_BP_FAT  GO:0043603~cellular amide metabolic process      206   \n\n     percent               ease  \\\n0  5.85704831238  4.32627669357e-43   \n1  6.55195234944  1.36601477909e-42   \n2  5.85704831238  4.04090150003e-42   \n3  5.95632031767  1.05565138148e-40   \n4  6.81667769689  3.74871147863e-40   \n\n                                         geneIds listTotals popHits  \\\n0  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     379   \n1  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     455   \n2  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     384   \n3  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     402   \n4  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     499   \n\npopTotals foldEnrichment         bonferroni          benjamini  \\\n0     11221  2.79042292227  1.28576943333e-39  1.28576943333e-39   \n1     11221  2.60009830425  4.05979592345e-39  2.02989796172e-39   \n2     11221  2.75408929047  1.20095592581e-38  4.00318641936e-39   \n3     11221   2.6753612131  3.13739590576e-37  7.84348976441e-38   \n4     11221  2.46662227543  1.11411705145e-36   2.2282341029e-37   \n\n            afdr  \n0  7.78207551683e-40  \n1  2.45717759656e-39  \n2  7.26874466353e-39  \n3  1.89889814083e-37  \n4   6.7431553467e-37  \n\n\n\n\n\n\nDAVIDgetGeneAttribute\n\n\nReturns a list of gene names for given gene ids.\n\n\nDAVIDgetGeneAttribute(x, df, refCol=\"ensembl_gene_id\", fieldTOretrieve=\"gene_name\")\n\n\n\n\nx\n a string with the list of IDs separated by ', '\n\n\ndf\n  a dataframe with the reference column and a the column to retrieve\n\n\nrefCol\n the header of the column containing the identifiers\n\n\nfieldTOretrieve\n the field to retrieve from parsedGTF eg. 'gene_name'\n\n\nreturns\n list of fieldTOretrieve separeted by ', ' in the same order as the given in x\n\n\n\n\n import AGEpy as age\n\n print df.head()\n\nensembl_gene_id            gene            locus sample_1 sample_2 status  \\\n0  WBGene00022275        Y74C9A.1    I:43732-44677       N2     daf2     OK   \n1  WBGene00004418  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n2  WBGene00018774  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n3  WBGene00018772        F53G12.4  I:134336-137282       N2     daf2     OK   \n4  WBGene00018958        F56C11.6  I:171339-175991       N2     daf2     OK   \n\n     value_1      value_2  log2(fold_change)  test_stat  p_value   q_value  \\\n0     0.195901     0.986634           2.332390    2.32959  0.00570  0.031216   \n1  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n2  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n3     1.235670     2.992460           1.276040    3.16508  0.00005  0.000556   \n4     2.651180     3.795600           0.517696    1.73994  0.00410  0.024157   \n\nsignificant                                              GO_id  \\\n0         yes                                                NaN   \n1         yes  GO:0003735; GO:0000463; GO:0044822; GO:0002181...   \n2         yes                                                NaN   \n3         yes                                                NaN   \n4         yes                 GO:0016787; GO:0005615; GO:0004104   \n\n                                           GO_term    gene_biotype  \\\n0                                                NaN  protein_coding   \n1  structural constituent of ribosome; maturation...  protein_coding   \n2                                                NaN  protein_coding   \n3                                                NaN  protein_coding   \n4  hydrolase activity; extracellular space; choli...  protein_coding   \n\n  NormInt evidence  \n0 -0.356904       no  \n1  3.458609       no  \n2  3.458609       no  \n3  0.283965       no  \n4  0.501360       no  \n\n\n print DAVIDdf.head()\n\ncategoryName                                     termName listHits  \\\n0  GOTERM_BP_FAT                       GO:0006412~translation      177   \n1  GOTERM_BP_FAT         GO:0006518~peptide metabolic process      198   \n2  GOTERM_BP_FAT      GO:0043043~peptide biosynthetic process      177   \n3  GOTERM_BP_FAT        GO:0043604~amide biosynthetic process      180   \n4  GOTERM_BP_FAT  GO:0043603~cellular amide metabolic process      206   \n\n     percent               ease  \\\n0  5.85704831238  4.32627669357e-43   \n1  6.55195234944  1.36601477909e-42   \n2  5.85704831238  4.04090150003e-42   \n3  5.95632031767  1.05565138148e-40   \n4  6.81667769689  3.74871147863e-40   \n\n                                         geneIds listTotals popHits  \\\n0  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     379   \n1  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     455   \n2  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     384   \n3  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     402   \n4  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     499   \n\npopTotals foldEnrichment         bonferroni          benjamini  \\\n0     11221  2.79042292227  1.28576943333e-39  1.28576943333e-39   \n1     11221  2.60009830425  4.05979592345e-39  2.02989796172e-39   \n2     11221  2.75408929047  1.20095592581e-38  4.00318641936e-39   \n3     11221   2.6753612131  3.13739590576e-37  7.84348976441e-38   \n4     11221  2.46662227543  1.11411705145e-36   2.2282341029e-37   \n\n            afdr  \n0  7.78207551683e-40  \n1  2.45717759656e-39  \n2  7.26874466353e-39  \n3  1.89889814083e-37  \n4   6.7431553467e-37  \n\n\n gene_names=df[[\nensembl_gene_id\n,\ngene\n]].drop_duplicates()\n\n DAVIDdf[\ngene_names\n]=DAVIDdf[\ngeneIds\n].apply(lambda x: \\\n                              age.DAVIDgetGeneAttribute(x,\\\n                              gene_names,\\\n                              refCol=\nensembl_gene_id\n,\\\n                              fieldTOretrieve=\ngene\n))\n\n print DAVIDdf.head()\n\ncategoryName                                     termName listHits  \\\n0  GOTERM_BP_FAT                       GO:0006412~translation      177   \n1  GOTERM_BP_FAT         GO:0006518~peptide metabolic process      198   \n2  GOTERM_BP_FAT      GO:0043043~peptide biosynthetic process      177   \n3  GOTERM_BP_FAT        GO:0043604~amide biosynthetic process      180   \n4  GOTERM_BP_FAT  GO:0043603~cellular amide metabolic process      206   \n\n     percent               ease  \\\n0  5.85704831238  4.32627669357e-43   \n1  6.55195234944  1.36601477909e-42   \n2  5.85704831238  4.04090150003e-42   \n3  5.95632031767  1.05565138148e-40   \n4  6.81667769689  3.74871147863e-40   \n\n                                         geneIds listTotals popHits  \\\n0  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     379   \n1  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     455   \n2  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     384   \n3  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     402   \n4  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     499   \n\npopTotals foldEnrichment         bonferroni          benjamini  \\\n0     11221  2.79042292227  1.28576943333e-39  1.28576943333e-39   \n1     11221  2.60009830425  4.05979592345e-39  2.02989796172e-39   \n2     11221  2.75408929047  1.20095592581e-38  4.00318641936e-39   \n3     11221   2.6753612131  3.13739590576e-37  7.84348976441e-38   \n4     11221  2.46662227543  1.11411705145e-36   2.2282341029e-37   \n\n            afdr                                         gene_names  \n0  7.78207551683e-40  ife-5, Y105E8A.20, tsn-1, yars-1, ife-3, C14C1...  \n1  2.45717759656e-39  ife-5, tsn-1, C14C10.1, ife-3, rps-30, iff-2, ...  \n2  7.26874466353e-39  ife-5, Y105E8A.20, tsn-1, yars-1, ife-3, C14C1...  \n3  1.89889814083e-37  ife-5, Y105E8A.20, tsn-1, yars-1, ife-3, C14C1...  \n4   6.7431553467e-37  ife-5, tsn-1, C14C10.1, ife-3, rps-30, Y51H4A....", 
            "title": "david"
        }, 
        {
            "location": "/modules/david/#davidenrich", 
            "text": "Queries the DAVID database for an enrichment analysis.\nCheck https://david.ncifcrf.gov/content.jsp?file=DAVID_API.html for database == \"type\" tag and categories ==  \"annot\" tag.  DAVIDenrich(database, categories, user, ids, ids_bg = None, name = '', name_bg = '', verbose = False, p = 0.1, n = 2)   database  A string for the database to query, e.g. 'WORMBASE_GENE_ID'  categories  A comma separated string with databases  user   A user ID registered at DAVID for querying  ids   A list with identifiers  name   A string with the name for the query set  ids_bg   A list with the background identifiers to enrich against, 'None' for whole set  name_bg   A string with the name for the background set  p   Maximum p value for enrichment of a term  n   Minimum number of genes within a term  ct   Maybe another threshold  returns   None if no ids match the queried database, or a pandas dataframe with results    import AGEpy as age  print sigGenes[:10]\n\n[u'WBGene00022275', u'WBGene00004418', u'WBGene00018774',\n u'WBGene00018772', u'WBGene00018958', u'WBGene00021662',\n u'WBGene00255594', u'WBGene00021658', u'WBGene00021026',\n u'WBGene00022042']  categories=['GOTERM_BP_FAT', 'GOTERM_CC_FAT', 'GOTERM_MF_FAT', 'KEGG_PATHWAY','BIOCARTA', 'PFAM', 'PROSITE' ]  DAVIDdf=age.DAVIDenrich('WORMBASE_GENE_ID', categories, 'email.registered@david.com', sigGenes)  print DAVIDdf.head()\n\ncategoryName                                     termName listHits  \\\n0  GOTERM_BP_FAT                       GO:0006412~translation      177   \n1  GOTERM_BP_FAT         GO:0006518~peptide metabolic process      198   \n2  GOTERM_BP_FAT      GO:0043043~peptide biosynthetic process      177   \n3  GOTERM_BP_FAT        GO:0043604~amide biosynthetic process      180   \n4  GOTERM_BP_FAT  GO:0043603~cellular amide metabolic process      206   \n\n     percent               ease  \\\n0  5.85704831238  4.32627669357e-43   \n1  6.55195234944  1.36601477909e-42   \n2  5.85704831238  4.04090150003e-42   \n3  5.95632031767  1.05565138148e-40   \n4  6.81667769689  3.74871147863e-40   \n\n                                         geneIds listTotals popHits  \\\n0  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     379   \n1  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     455   \n2  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     384   \n3  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     402   \n4  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     499   \n\npopTotals foldEnrichment         bonferroni          benjamini  \\\n0     11221  2.79042292227  1.28576943333e-39  1.28576943333e-39   \n1     11221  2.60009830425  4.05979592345e-39  2.02989796172e-39   \n2     11221  2.75408929047  1.20095592581e-38  4.00318641936e-39   \n3     11221   2.6753612131  3.13739590576e-37  7.84348976441e-38   \n4     11221  2.46662227543  1.11411705145e-36   2.2282341029e-37   \n\n            afdr  \n0  7.78207551683e-40  \n1  2.45717759656e-39  \n2  7.26874466353e-39  \n3  1.89889814083e-37  \n4   6.7431553467e-37", 
            "title": "DAVIDenrich"
        }, 
        {
            "location": "/modules/david/#davidgetgeneattribute", 
            "text": "Returns a list of gene names for given gene ids.  DAVIDgetGeneAttribute(x, df, refCol=\"ensembl_gene_id\", fieldTOretrieve=\"gene_name\")   x  a string with the list of IDs separated by ', '  df   a dataframe with the reference column and a the column to retrieve  refCol  the header of the column containing the identifiers  fieldTOretrieve  the field to retrieve from parsedGTF eg. 'gene_name'  returns  list of fieldTOretrieve separeted by ', ' in the same order as the given in x    import AGEpy as age  print df.head()\n\nensembl_gene_id            gene            locus sample_1 sample_2 status  \\\n0  WBGene00022275        Y74C9A.1    I:43732-44677       N2     daf2     OK   \n1  WBGene00004418  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n2  WBGene00018774  F53G12.9,rpl-7  I:111037-113672       N2     daf2     OK   \n3  WBGene00018772        F53G12.4  I:134336-137282       N2     daf2     OK   \n4  WBGene00018958        F56C11.6  I:171339-175991       N2     daf2     OK   \n\n     value_1      value_2  log2(fold_change)  test_stat  p_value   q_value  \\\n0     0.195901     0.986634           2.332390    2.32959  0.00570  0.031216   \n1  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n2  3354.820000  2463.480000          -0.445539   -2.71381  0.00005  0.000556   \n3     1.235670     2.992460           1.276040    3.16508  0.00005  0.000556   \n4     2.651180     3.795600           0.517696    1.73994  0.00410  0.024157   \n\nsignificant                                              GO_id  \\\n0         yes                                                NaN   \n1         yes  GO:0003735; GO:0000463; GO:0044822; GO:0002181...   \n2         yes                                                NaN   \n3         yes                                                NaN   \n4         yes                 GO:0016787; GO:0005615; GO:0004104   \n\n                                           GO_term    gene_biotype  \\\n0                                                NaN  protein_coding   \n1  structural constituent of ribosome; maturation...  protein_coding   \n2                                                NaN  protein_coding   \n3                                                NaN  protein_coding   \n4  hydrolase activity; extracellular space; choli...  protein_coding   \n\n  NormInt evidence  \n0 -0.356904       no  \n1  3.458609       no  \n2  3.458609       no  \n3  0.283965       no  \n4  0.501360       no    print DAVIDdf.head()\n\ncategoryName                                     termName listHits  \\\n0  GOTERM_BP_FAT                       GO:0006412~translation      177   \n1  GOTERM_BP_FAT         GO:0006518~peptide metabolic process      198   \n2  GOTERM_BP_FAT      GO:0043043~peptide biosynthetic process      177   \n3  GOTERM_BP_FAT        GO:0043604~amide biosynthetic process      180   \n4  GOTERM_BP_FAT  GO:0043603~cellular amide metabolic process      206   \n\n     percent               ease  \\\n0  5.85704831238  4.32627669357e-43   \n1  6.55195234944  1.36601477909e-42   \n2  5.85704831238  4.04090150003e-42   \n3  5.95632031767  1.05565138148e-40   \n4  6.81667769689  3.74871147863e-40   \n\n                                         geneIds listTotals popHits  \\\n0  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     379   \n1  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     455   \n2  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     384   \n3  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     402   \n4  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     499   \n\npopTotals foldEnrichment         bonferroni          benjamini  \\\n0     11221  2.79042292227  1.28576943333e-39  1.28576943333e-39   \n1     11221  2.60009830425  4.05979592345e-39  2.02989796172e-39   \n2     11221  2.75408929047  1.20095592581e-38  4.00318641936e-39   \n3     11221   2.6753612131  3.13739590576e-37  7.84348976441e-38   \n4     11221  2.46662227543  1.11411705145e-36   2.2282341029e-37   \n\n            afdr  \n0  7.78207551683e-40  \n1  2.45717759656e-39  \n2  7.26874466353e-39  \n3  1.89889814083e-37  \n4   6.7431553467e-37    gene_names=df[[ ensembl_gene_id , gene ]].drop_duplicates()  DAVIDdf[ gene_names ]=DAVIDdf[ geneIds ].apply(lambda x: \\\n                              age.DAVIDgetGeneAttribute(x,\\\n                              gene_names,\\\n                              refCol= ensembl_gene_id ,\\\n                              fieldTOretrieve= gene ))  print DAVIDdf.head()\n\ncategoryName                                     termName listHits  \\\n0  GOTERM_BP_FAT                       GO:0006412~translation      177   \n1  GOTERM_BP_FAT         GO:0006518~peptide metabolic process      198   \n2  GOTERM_BP_FAT      GO:0043043~peptide biosynthetic process      177   \n3  GOTERM_BP_FAT        GO:0043604~amide biosynthetic process      180   \n4  GOTERM_BP_FAT  GO:0043603~cellular amide metabolic process      206   \n\n     percent               ease  \\\n0  5.85704831238  4.32627669357e-43   \n1  6.55195234944  1.36601477909e-42   \n2  5.85704831238  4.04090150003e-42   \n3  5.95632031767  1.05565138148e-40   \n4  6.81667769689  3.74871147863e-40   \n\n                                         geneIds listTotals popHits  \\\n0  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     379   \n1  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     455   \n2  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     384   \n3  WBGENE00002063, WBGENE00013678, WBGENE00006626...       1878     402   \n4  WBGENE00002063, WBGENE00006626, WBGENE00007584...       1878     499   \n\npopTotals foldEnrichment         bonferroni          benjamini  \\\n0     11221  2.79042292227  1.28576943333e-39  1.28576943333e-39   \n1     11221  2.60009830425  4.05979592345e-39  2.02989796172e-39   \n2     11221  2.75408929047  1.20095592581e-38  4.00318641936e-39   \n3     11221   2.6753612131  3.13739590576e-37  7.84348976441e-38   \n4     11221  2.46662227543  1.11411705145e-36   2.2282341029e-37   \n\n            afdr                                         gene_names  \n0  7.78207551683e-40  ife-5, Y105E8A.20, tsn-1, yars-1, ife-3, C14C1...  \n1  2.45717759656e-39  ife-5, tsn-1, C14C10.1, ife-3, rps-30, iff-2, ...  \n2  7.26874466353e-39  ife-5, Y105E8A.20, tsn-1, yars-1, ife-3, C14C1...  \n3  1.89889814083e-37  ife-5, Y105E8A.20, tsn-1, yars-1, ife-3, C14C1...  \n4   6.7431553467e-37  ife-5, tsn-1, C14C10.1, ife-3, rps-30, Y51H4A....", 
            "title": "DAVIDgetGeneAttribute"
        }, 
        {
            "location": "/modules/fasta/", 
            "text": "getFasta\n\n\nRetrieves a sequence from an opened multifasta file.\n\n\ngetFasta(opened_file, sequence_name)\n\n\n\n\nopened_file\n an opened multifasta file eg. opened_file=open(\"/path/to/file.fa\",'r+')\n\n\nsequence_name\n the name of the sequence to be retrieved eg. for '\n2 dna:chromosome chromosome:GRCm38:2:1:182113224:1 REF' use: sequence_name=str(2)\n\n\nreturns\n a string with the sequence of interest\n\n\n\n\n import AGEpy as age\n\n fafile=\n/path/to/GRCm38.dna.primary_assembly.fa\n\n\n with open(fafile, \nr\n) as fastafile:\n...     chr2=age.getFasta(fastafile, \n2\n)\n\n print len(chr2)\n\n182113224\n\n\n print chr2[82113224:82113284]\n\nAGGGTGAATGATGTTTCTGGTACAGTGTACCAGTAAACCTAGCAGTAGGAGCATCAGTAT\n\n\n\n\n\n\nwriteFasta\n\n\nWrites a fasta sequence into a file.\n\n\nwriteFasta(sequence, sequence_name, output_file)\n\n\n\n\nsequence\n a string with the sequence to be written\n\n\nsequence_name\n name of the the fasta sequence\n\n\noutput_file\n /path/to/file.fa to be written\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n print len(chr2)\n\n182113224\n\n\n print chr2[82113224:82113284]\n\nAGGGTGAATGATGTTTCTGGTACAGTGTACCAGTAAACCTAGCAGTAGGAGCATCAGTAT\n\n\n age.writeFasta(chr2,\n2 my version of this sequence\n,\n/path/to/out/file.fa\n)\n\n\n\n\n\n\nrewriteFasta\n\n\nRewrites a specific sequence in a multifasta file while keeping the sequence header.\n\n\nrewriteFasta(sequence, sequence_name, fasta_in, fasta_out)\n\n\n\n\nsequence\n a string with the sequence to be written\n\n\nsequence_name\n the name of the sequence to be retrieved eg. for '\n2 dna:chromosome chromosome:GRCm38:2:1:182113224:1 REF' use: sequence_name=str(2)\n\n\nfasta_in\n /path/to/original.fa\n\n\nfasta_out\n /path/to/destination.fa\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n fafile=\n/path/to/GRCm38.dna.primary_assembly.fa\n\n\n with open(fafile, \nr\n) as fastafile:\n...     chr2=age.getFasta(fastafile, \n2\n)\n\n chr2=chr2.strip(\nN\n)\n\n age.rewriteFasta(chr2, \n2\n, fafile, \n/path/to/modified/file.fa\n)", 
            "title": "fasta"
        }, 
        {
            "location": "/modules/fasta/#getfasta", 
            "text": "Retrieves a sequence from an opened multifasta file.  getFasta(opened_file, sequence_name)   opened_file  an opened multifasta file eg. opened_file=open(\"/path/to/file.fa\",'r+')  sequence_name  the name of the sequence to be retrieved eg. for ' 2 dna:chromosome chromosome:GRCm38:2:1:182113224:1 REF' use: sequence_name=str(2)  returns  a string with the sequence of interest    import AGEpy as age  fafile= /path/to/GRCm38.dna.primary_assembly.fa   with open(fafile,  r ) as fastafile:\n...     chr2=age.getFasta(fastafile,  2 )  print len(chr2)\n\n182113224  print chr2[82113224:82113284]\n\nAGGGTGAATGATGTTTCTGGTACAGTGTACCAGTAAACCTAGCAGTAGGAGCATCAGTAT", 
            "title": "getFasta"
        }, 
        {
            "location": "/modules/fasta/#writefasta", 
            "text": "Writes a fasta sequence into a file.  writeFasta(sequence, sequence_name, output_file)   sequence  a string with the sequence to be written  sequence_name  name of the the fasta sequence  output_file  /path/to/file.fa to be written  returns  nothing    import AGEpy as age  print len(chr2)\n\n182113224  print chr2[82113224:82113284]\n\nAGGGTGAATGATGTTTCTGGTACAGTGTACCAGTAAACCTAGCAGTAGGAGCATCAGTAT  age.writeFasta(chr2, 2 my version of this sequence , /path/to/out/file.fa )", 
            "title": "writeFasta"
        }, 
        {
            "location": "/modules/fasta/#rewritefasta", 
            "text": "Rewrites a specific sequence in a multifasta file while keeping the sequence header.  rewriteFasta(sequence, sequence_name, fasta_in, fasta_out)   sequence  a string with the sequence to be written  sequence_name  the name of the sequence to be retrieved eg. for ' 2 dna:chromosome chromosome:GRCm38:2:1:182113224:1 REF' use: sequence_name=str(2)  fasta_in  /path/to/original.fa  fasta_out  /path/to/destination.fa  returns  nothing    import AGEpy as age  fafile= /path/to/GRCm38.dna.primary_assembly.fa   with open(fafile,  r ) as fastafile:\n...     chr2=age.getFasta(fastafile,  2 )  chr2=chr2.strip( N )  age.rewriteFasta(chr2,  2 , fafile,  /path/to/modified/file.fa )", 
            "title": "rewriteFasta"
        }, 
        {
            "location": "/modules/go/", 
            "text": "getGeneAssociation\n\n\nThis function collects GO annotation from http://geneontology.org/page/download-annotations.\n\n\ngetGeneAssociation(URL_or_file)\n\n\n\n\n\n\nURL_or_file\n either a link to a file on geneontology.org eg. http://geneontology.org/gene-associations/gene_association.fb.gz or the path for the respective  downloded .gz file.\n\n\n\n\n\n\nreturns\n a Pandas dataframe with the parsed table.\n\n\n\n\n\n\n import pandas as pd\n\n gA=age.getGeneAssociation(\nhttp://geneontology.org/gene-associations/gene_association.wb.gz\n)\n\n print gA.head()\n\nDB    DB_Object_ID DB_Object_Symbol Qualifier       GO ID  \\\n0  WB  WBGene00000001            aap-1            GO:0005942   \n1  WB  WBGene00000001            aap-1            GO:0005942   \n2  WB  WBGene00000001            aap-1            GO:0008286   \n3  WB  WBGene00000001            aap-1            GO:0008286   \n4  WB  WBGene00000001            aap-1            GO:0008286   \n\n                        DB:Reference Evidence      With (or) From Aspect  \\\n0                        GO_REF:0000002      IEA  InterPro:IPR001720      C   \n1  WB_REF:WBPaper00005614|PMID:12393910      IDA                          C   \n2  WB_REF:WBPaper00005614|PMID:12393910      IGI   WB:WBGene00000090      P   \n3  WB_REF:WBPaper00005614|PMID:12393910      IGI   WB:WBGene00000898      P   \n4  WB_REF:WBPaper00005614|PMID:12393910      IMP                          P   \n\nDB_Object_Name DB_Object_Synonym DB_Object_Type       Taxon      Date  \\\n0                       Y110A7A.10           gene  taxon:6239  20170321   \n1                       Y110A7A.10           gene  taxon:6239  20151214   \n2                       Y110A7A.10           gene  taxon:6239  20151214   \n3                       Y110A7A.10           gene  taxon:6239  20151214   \n4                       Y110A7A.10           gene  taxon:6239  20060302   \n\nAssigned_by Annotation Extension Gene Product Form ID  \n0          WB                                            \n1          WB                                            \n2          WB                                            \n3          WB                                            \n4          WB", 
            "title": "go"
        }, 
        {
            "location": "/modules/go/#getgeneassociation", 
            "text": "This function collects GO annotation from http://geneontology.org/page/download-annotations.  getGeneAssociation(URL_or_file)    URL_or_file  either a link to a file on geneontology.org eg. http://geneontology.org/gene-associations/gene_association.fb.gz or the path for the respective  downloded .gz file.    returns  a Pandas dataframe with the parsed table.     import pandas as pd  gA=age.getGeneAssociation( http://geneontology.org/gene-associations/gene_association.wb.gz )  print gA.head()\n\nDB    DB_Object_ID DB_Object_Symbol Qualifier       GO ID  \\\n0  WB  WBGene00000001            aap-1            GO:0005942   \n1  WB  WBGene00000001            aap-1            GO:0005942   \n2  WB  WBGene00000001            aap-1            GO:0008286   \n3  WB  WBGene00000001            aap-1            GO:0008286   \n4  WB  WBGene00000001            aap-1            GO:0008286   \n\n                        DB:Reference Evidence      With (or) From Aspect  \\\n0                        GO_REF:0000002      IEA  InterPro:IPR001720      C   \n1  WB_REF:WBPaper00005614|PMID:12393910      IDA                          C   \n2  WB_REF:WBPaper00005614|PMID:12393910      IGI   WB:WBGene00000090      P   \n3  WB_REF:WBPaper00005614|PMID:12393910      IGI   WB:WBGene00000898      P   \n4  WB_REF:WBPaper00005614|PMID:12393910      IMP                          P   \n\nDB_Object_Name DB_Object_Synonym DB_Object_Type       Taxon      Date  \\\n0                       Y110A7A.10           gene  taxon:6239  20170321   \n1                       Y110A7A.10           gene  taxon:6239  20151214   \n2                       Y110A7A.10           gene  taxon:6239  20151214   \n3                       Y110A7A.10           gene  taxon:6239  20151214   \n4                       Y110A7A.10           gene  taxon:6239  20060302   \n\nAssigned_by Annotation Extension Gene Product Form ID  \n0          WB                                            \n1          WB                                            \n2          WB                                            \n3          WB                                            \n4          WB", 
            "title": "getGeneAssociation"
        }, 
        {
            "location": "/modules/gtf/", 
            "text": "readGTF\n\n\nReads a GTF file and labels the respective columns in agreement with GTF file standards:\n'seqname','source','feature','start','end','score','strand','frame','attribute'.\n\n\nreadGTF(infile)\n\n\n\n\ninfile\n /path/to/file.gtf\n\n\nreturns\n a Pandas dataframe of the respective GTF\n\n\n\n\n import AGEpy as age\n\n GTF=age.readGTF(\ngencode.v24.primary_assembly.annotation.gtf\n)\n\n print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id \nENSG00000223972.5\n; gene_type \ntransc...\n  \n1  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n\n\n\n\n\n\n\nretrieve_GTF_field\n\n\nReturns a field of choice from the attribute column of the GTF.\n\n\nretrieve_GTF_field(field,gtf)\n\n\n\n\nfield\n field to be retrieved\n\n\nreturns\n a Pandas dataframe with one column containing the field of choice\n\n\n\n\n import AGEpy as age\n\n GTF=age.readGTF(\n/gencode.v24.primary_assembly.annotation.gtf\n)\n\n print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id \nENSG00000223972.5\n; gene_type \ntransc...\n  \n1  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n\n\n\n GTF[\ngene_id\n]=age.retrieve_GTF_field(\ngene_id\n,GTF)\n\n print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute            gene_id  \n0  gene_id \nENSG00000223972.5\n; gene_type \ntransc...\n  ENSG00000223972.5  \n1  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5  \n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5  \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5  \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5\n\n\n\n\n\n\nattributesGTF\n\n\nList the type of attributes in a the attribute section of a GTF file\n\n\nattributesGTF(inGTF)\n\n\n\n\ninGTF\n GTF dataframe to be analysed\n\n\nreturns\n a list of attributes present in the attribute section\n\n\n\n\n import AGEpy as age\n\n attributes=age.attributesGTF(GTF)\n\n print attributes\n\n['gene_status', 'havana_gene', 'transcript_support_level', 'level', 'transcript_type', 'tag', 'protein_id', 'gene_id', 'exon_id', 'transcript_id', 'exon_number', 'ont', 'havana_transcript', 'ccdsid', 'transcript_name', 'gene_type', 'transcript_status', 'gene_name']\n\n\n\n\n\n\nparseGTF\n\n\nReads an extracts all attributes in the attributes section of a GTF and constructs a new dataframe wiht one collumn per attribute instead of the attributes column.\n\n\nparseGTF(inGTF)\n\n\n\n\ninGTF\n GTF dataframe to be parsed\n\n\nreturns\n a dataframe of the orignal input GTF with attributes parsed\n\n\n\n\n GTF=age.readGTF(\ngencode.v24.primary_assembly.annotation.gtf\n)\n\n print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id \nENSG00000223972.5\n; gene_type \ntransc...\n  \n1  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  \n\n\n GTFpa=age.parseGTF(GTF)\n\n print GTFpa.head()\n\nseqname  source     feature  start    end score strand frame gene_status  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .       KNOWN   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .       KNOWN   \n2    chr1  HAVANA        exon  11869  12227     .      +     .       KNOWN   \n3    chr1  HAVANA        exon  12613  12721     .      +     .       KNOWN   \n4    chr1  HAVANA        exon  13221  14409     .      +     .       KNOWN   \n\n            havana_gene    ...               exon_id      transcript_id  \\\n0  OTTHUMG00000000961.2    ...                   NaN                NaN   \n1  OTTHUMG00000000961.2    ...                   NaN  ENST00000456328.2   \n2  OTTHUMG00000000961.2    ...     ENSE00002234944.1  ENST00000456328.2   \n3  OTTHUMG00000000961.2    ...     ENSE00003582793.1  ENST00000456328.2   \n4  OTTHUMG00000000961.2    ...     ENSE00002312635.1  ENST00000456328.2   \n\n  exon_number  ont     havana_transcript ccdsid transcript_name  \\\n0         NaN  NaN                   NaN    NaN             NaN   \n1         NaN  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n2           1  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n3           2  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n4           3  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n\n                            gene_type transcript_status gene_name  \n0  transcribed_unprocessed_pseudogene               NaN   DDX11L1  \n1  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n2  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n3  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n4  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1\n\n\n\n\n\n\nwriteGTF\n\n\nWrite a GTF dataframe into a file.\n\n\nwriteGTF(inGTF,file_path)\n\n\n\n\ninGTF\n GTF dataframe to be written. It should either have 9 columns with the last one being the \"attributes\" section or more than 9 columns where all columns after the 8th will be colapsed into one.\n\n\nfile_path\n /path/to/the/file.gtf\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n writeGTF(GTFpa,\n/path/to/new/file.gtf\n)\n\n\n\n\n\n\nMAPGenoToTrans\n\n\nGets all positions of all bases in an exon.\n\n\nMAPGenoToTrans(parsedGTF,feature)\n\n\n\n\ndf\n a Pandas dataframe with 'start','end', and 'strand' information for each entry. df must contain ['seqname','feature','start','end','strand','frame','gene_id',  'transcript_id','exon_id','exon_number']\n\n\nfeature\n feature upon wich to generate the map, eg. 'exon' or 'transcript'\n\n\nreturns\n a dictionary with a string with the comma separated positions of all bases in the exon\n\n\n\n\n import AGEpy as age\n\n print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute            gene_id  \\\n0  gene_id \nENSG00000223972.5\n; gene_type \ntransc...\n  ENSG00000223972.5   \n1  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n\n     transcript_id            exon_id exon_number  \n0                NaN                NaN         NaN  \n1  ENST00000456328.2                NaN         NaN  \n2  ENST00000456328.2  ENSE00002234944.1           1  \n3  ENST00000456328.2  ENSE00003582793.1           2  \n4  ENST00000456328.2  ENSE00002312635.1           3\n\n\n GtoT=age.MAPGenoToTrans(GTF,\nexon\n)\n\n print GtoT\n\n{ENST23923910:'234,235,236,1021,..'}\n\n\n\n\n\n\nGTFtoBED\n\n\nTransform a GTF dataframe into a bed dataframe\n\n\nGTFtoBED(inGTF,name)\n\n\n\n\ninGTF\n GTF dataframe for transformation\n\n\nname\n field of the GTF data frame to be use for the bed 'name' positon\n\n\nreturns\n a bed dataframe with the corresponding bed fiels: 'chrom','chromStart','chromEnd','name','score','strand'\n\n\n\n\n import AGEpy as age\n\n bed = age.GTFtoBED(GTF, \ngene_id\n)\n\n\n\n\n\n\nGetTransPosition\n\n\nMaps a genome position to transcript positon.\n\n\nGetTransPosition(df, field, dic, refCol=\"transcript_id\")\n\n\n\n\ndf\n a Pandas dataframe\n\n\nfield\n the head of the column containing the genomic position\n\n\ndic\n a dictionary containing for each transcript the respective bases eg. {ENST23923910:'234,235,236,1021,..'}. See \nMAPGenoToTrans\n.\n\n\nrefCol\n header of the reference column with IDs, eg. 'transcript_id'\n\n\n\n\n import AGEpy as age\n\n print GTF_.head()\n\nseqname  source feature  start    end score strand frame  \\\n2    chr1  HAVANA    exon  11869  12227     .      +     .   \n3    chr1  HAVANA    exon  12613  12721     .      +     .   \n4    chr1  HAVANA    exon  13221  14409     .      +     .   \n6    chr1  HAVANA    exon  12010  12057     .      +     .   \n7    chr1  HAVANA    exon  12179  12227     .      +     .   \n\n                                         attribute            gene_id  \\\n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n6  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n7  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n\n     transcript_id            exon_id exon_number  target  \n2  ENST00000456328.2  ENSE00002234944.1           1   12000  \n3  ENST00000456328.2  ENSE00003582793.1           2   12617  \n4  ENST00000456328.2  ENSE00002312635.1           3   14000  \n6  ENST00000450305.2  ENSE00001948541.1           1   12040  \n7  ENST00000450305.2  ENSE00001671638.2           2   12210  \n\n\n GTF_[\ntranscript target\n]=GTF_.apply(age.GetTransPosition, \\\n                                     args=(\ntarget\n,GtoT),axis=1)\n\n print GTF_.head()\n\nseqname  source feature  start    end score strand frame  \\\n2    chr1  HAVANA    exon  11869  12227     .      +     .   \n3    chr1  HAVANA    exon  12613  12721     .      +     .   \n4    chr1  HAVANA    exon  13221  14409     .      +     .   \n6    chr1  HAVANA    exon  12010  12057     .      +     .   \n7    chr1  HAVANA    exon  12179  12227     .      +     .   \n\n                                         attribute            gene_id  \\\n2  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n3  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n4  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n6  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n7  gene_id \nENSG00000223972.5\n; transcript_id \nEN...\n  ENSG00000223972.5   \n\n     transcript_id            exon_id exon_number  target  transcript target  \n2  ENST00000456328.2  ENSE00002234944.1           1   12000                132  \n3  ENST00000456328.2  ENSE00003582793.1           2   12617                364  \n4  ENST00000456328.2  ENSE00002312635.1           3   14000               1248  \n6  ENST00000450305.2  ENSE00001948541.1           1   12040                 31  \n7  ENST00000450305.2  ENSE00001671638.2           2   12210                 80", 
            "title": "gtf"
        }, 
        {
            "location": "/modules/gtf/#readgtf", 
            "text": "Reads a GTF file and labels the respective columns in agreement with GTF file standards:\n'seqname','source','feature','start','end','score','strand','frame','attribute'.  readGTF(infile)   infile  /path/to/file.gtf  returns  a Pandas dataframe of the respective GTF    import AGEpy as age  GTF=age.readGTF( gencode.v24.primary_assembly.annotation.gtf )  print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id  ENSG00000223972.5 ; gene_type  transc...   \n1  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...", 
            "title": "readGTF"
        }, 
        {
            "location": "/modules/gtf/#retrieve_gtf_field", 
            "text": "Returns a field of choice from the attribute column of the GTF.  retrieve_GTF_field(field,gtf)   field  field to be retrieved  returns  a Pandas dataframe with one column containing the field of choice    import AGEpy as age  GTF=age.readGTF( /gencode.v24.primary_assembly.annotation.gtf )  print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id  ENSG00000223972.5 ; gene_type  transc...   \n1  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...   GTF[ gene_id ]=age.retrieve_GTF_field( gene_id ,GTF)  print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute            gene_id  \n0  gene_id  ENSG00000223972.5 ; gene_type  transc...   ENSG00000223972.5  \n1  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5  \n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5  \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5  \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5", 
            "title": "retrieve_GTF_field"
        }, 
        {
            "location": "/modules/gtf/#attributesgtf", 
            "text": "List the type of attributes in a the attribute section of a GTF file  attributesGTF(inGTF)   inGTF  GTF dataframe to be analysed  returns  a list of attributes present in the attribute section    import AGEpy as age  attributes=age.attributesGTF(GTF)  print attributes\n\n['gene_status', 'havana_gene', 'transcript_support_level', 'level', 'transcript_type', 'tag', 'protein_id', 'gene_id', 'exon_id', 'transcript_id', 'exon_number', 'ont', 'havana_transcript', 'ccdsid', 'transcript_name', 'gene_type', 'transcript_status', 'gene_name']", 
            "title": "attributesGTF"
        }, 
        {
            "location": "/modules/gtf/#parsegtf", 
            "text": "Reads an extracts all attributes in the attributes section of a GTF and constructs a new dataframe wiht one collumn per attribute instead of the attributes column.  parseGTF(inGTF)   inGTF  GTF dataframe to be parsed  returns  a dataframe of the orignal input GTF with attributes parsed    GTF=age.readGTF( gencode.v24.primary_assembly.annotation.gtf )  print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute  \n0  gene_id  ENSG00000223972.5 ; gene_type  transc...   \n1  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...     GTFpa=age.parseGTF(GTF)  print GTFpa.head()\n\nseqname  source     feature  start    end score strand frame gene_status  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .       KNOWN   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .       KNOWN   \n2    chr1  HAVANA        exon  11869  12227     .      +     .       KNOWN   \n3    chr1  HAVANA        exon  12613  12721     .      +     .       KNOWN   \n4    chr1  HAVANA        exon  13221  14409     .      +     .       KNOWN   \n\n            havana_gene    ...               exon_id      transcript_id  \\\n0  OTTHUMG00000000961.2    ...                   NaN                NaN   \n1  OTTHUMG00000000961.2    ...                   NaN  ENST00000456328.2   \n2  OTTHUMG00000000961.2    ...     ENSE00002234944.1  ENST00000456328.2   \n3  OTTHUMG00000000961.2    ...     ENSE00003582793.1  ENST00000456328.2   \n4  OTTHUMG00000000961.2    ...     ENSE00002312635.1  ENST00000456328.2   \n\n  exon_number  ont     havana_transcript ccdsid transcript_name  \\\n0         NaN  NaN                   NaN    NaN             NaN   \n1         NaN  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n2           1  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n3           2  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n4           3  NaN  OTTHUMT00000362751.1    NaN     DDX11L1-002   \n\n                            gene_type transcript_status gene_name  \n0  transcribed_unprocessed_pseudogene               NaN   DDX11L1  \n1  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n2  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n3  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1  \n4  transcribed_unprocessed_pseudogene             KNOWN   DDX11L1", 
            "title": "parseGTF"
        }, 
        {
            "location": "/modules/gtf/#writegtf", 
            "text": "Write a GTF dataframe into a file.  writeGTF(inGTF,file_path)   inGTF  GTF dataframe to be written. It should either have 9 columns with the last one being the \"attributes\" section or more than 9 columns where all columns after the 8th will be colapsed into one.  file_path  /path/to/the/file.gtf  returns  nothing    import AGEpy as age  writeGTF(GTFpa, /path/to/new/file.gtf )", 
            "title": "writeGTF"
        }, 
        {
            "location": "/modules/gtf/#mapgenototrans", 
            "text": "Gets all positions of all bases in an exon.  MAPGenoToTrans(parsedGTF,feature)   df  a Pandas dataframe with 'start','end', and 'strand' information for each entry. df must contain ['seqname','feature','start','end','strand','frame','gene_id',  'transcript_id','exon_id','exon_number']  feature  feature upon wich to generate the map, eg. 'exon' or 'transcript'  returns  a dictionary with a string with the comma separated positions of all bases in the exon    import AGEpy as age  print GTF.head()\n\nseqname  source     feature  start    end score strand frame  \\\n0    chr1  HAVANA        gene  11869  14409     .      +     .   \n1    chr1  HAVANA  transcript  11869  14409     .      +     .   \n2    chr1  HAVANA        exon  11869  12227     .      +     .   \n3    chr1  HAVANA        exon  12613  12721     .      +     .   \n4    chr1  HAVANA        exon  13221  14409     .      +     .   \n\n                                         attribute            gene_id  \\\n0  gene_id  ENSG00000223972.5 ; gene_type  transc...   ENSG00000223972.5   \n1  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n\n     transcript_id            exon_id exon_number  \n0                NaN                NaN         NaN  \n1  ENST00000456328.2                NaN         NaN  \n2  ENST00000456328.2  ENSE00002234944.1           1  \n3  ENST00000456328.2  ENSE00003582793.1           2  \n4  ENST00000456328.2  ENSE00002312635.1           3  GtoT=age.MAPGenoToTrans(GTF, exon )  print GtoT\n\n{ENST23923910:'234,235,236,1021,..'}", 
            "title": "MAPGenoToTrans"
        }, 
        {
            "location": "/modules/gtf/#gtftobed", 
            "text": "Transform a GTF dataframe into a bed dataframe  GTFtoBED(inGTF,name)   inGTF  GTF dataframe for transformation  name  field of the GTF data frame to be use for the bed 'name' positon  returns  a bed dataframe with the corresponding bed fiels: 'chrom','chromStart','chromEnd','name','score','strand'    import AGEpy as age  bed = age.GTFtoBED(GTF,  gene_id )", 
            "title": "GTFtoBED"
        }, 
        {
            "location": "/modules/gtf/#gettransposition", 
            "text": "Maps a genome position to transcript positon.  GetTransPosition(df, field, dic, refCol=\"transcript_id\")   df  a Pandas dataframe  field  the head of the column containing the genomic position  dic  a dictionary containing for each transcript the respective bases eg. {ENST23923910:'234,235,236,1021,..'}. See  MAPGenoToTrans .  refCol  header of the reference column with IDs, eg. 'transcript_id'    import AGEpy as age  print GTF_.head()\n\nseqname  source feature  start    end score strand frame  \\\n2    chr1  HAVANA    exon  11869  12227     .      +     .   \n3    chr1  HAVANA    exon  12613  12721     .      +     .   \n4    chr1  HAVANA    exon  13221  14409     .      +     .   \n6    chr1  HAVANA    exon  12010  12057     .      +     .   \n7    chr1  HAVANA    exon  12179  12227     .      +     .   \n\n                                         attribute            gene_id  \\\n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n6  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n7  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n\n     transcript_id            exon_id exon_number  target  \n2  ENST00000456328.2  ENSE00002234944.1           1   12000  \n3  ENST00000456328.2  ENSE00003582793.1           2   12617  \n4  ENST00000456328.2  ENSE00002312635.1           3   14000  \n6  ENST00000450305.2  ENSE00001948541.1           1   12040  \n7  ENST00000450305.2  ENSE00001671638.2           2   12210    GTF_[ transcript target ]=GTF_.apply(age.GetTransPosition, \\\n                                     args=( target ,GtoT),axis=1)  print GTF_.head()\n\nseqname  source feature  start    end score strand frame  \\\n2    chr1  HAVANA    exon  11869  12227     .      +     .   \n3    chr1  HAVANA    exon  12613  12721     .      +     .   \n4    chr1  HAVANA    exon  13221  14409     .      +     .   \n6    chr1  HAVANA    exon  12010  12057     .      +     .   \n7    chr1  HAVANA    exon  12179  12227     .      +     .   \n\n                                         attribute            gene_id  \\\n2  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n3  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n4  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n6  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n7  gene_id  ENSG00000223972.5 ; transcript_id  EN...   ENSG00000223972.5   \n\n     transcript_id            exon_id exon_number  target  transcript target  \n2  ENST00000456328.2  ENSE00002234944.1           1   12000                132  \n3  ENST00000456328.2  ENSE00003582793.1           2   12617                364  \n4  ENST00000456328.2  ENSE00002312635.1           3   14000               1248  \n6  ENST00000450305.2  ENSE00001948541.1           1   12040                 31  \n7  ENST00000450305.2  ENSE00001671638.2           2   12210                 80", 
            "title": "GetTransPosition"
        }, 
        {
            "location": "/modules/homology/", 
            "text": "getHomoloGene\n\n\nReturns NBCI's Homolog Gene tables.\n\n\ngetHomoloGene(taxfile=\"build_inputs/taxid_taxname\", genefile=\"homologene.data\", proteinsfile=\"build_inputs/all_proteins.data\", proteinsclusterfile=\"build_inputs/proteins_for_clustering.data\", baseURL=\"http://ftp.ncbi.nih.gov/pub/HomoloGene/current/\")\n\n\n\n\ntaxfile\n path to local file or to baseURL/taxfile, default=\"build_inputs/taxid_taxname\",\n\n\ngenefile\n path to local file or to baseURL/genefile, defult=\"homologene.data\"\n\n\nproteinsfile\n path to local file or to baseURL/proteinsfile, default=\"build_inputs/all_proteins.data\"\n\n\nproteinsclusterfile\n path to local file or to baseURL/proteinsclusterfile, default=\"build_inputs/proteins_for_clustering.data\"\n\n\nbaseURL\n baseURL for downloading files, default=\"http://ftp.ncbi.nih.gov/pub/HomoloGene/current/\"\n\n\nreturns genedf\n Homolog gene Pandas dataframe\n\n\nreturns protclusdf\n Pandas dataframe. Lists one protein per gene that were used for homologene clustering.\n                    If a gene has multiple protein accessions derived from alternative splicing,\n                    only one protein isoform that give most protein alignment to proteins in other species\n                    was selected for clustering and it is listed in this file.\n\n\nreturns proteinsdf\n Pandas dataframe. Lists all proteins and their gene information.\n                    If a gene has multple protein accessions derived from alternative splicing event,\n                    each protein accession is list in a separate line.\n\n\n\n\n import AGEpy as age\n\n genedf, protclusdf, proteinsdf = age.getHomoloGene()\n\n print genedf.head()\n\nHID Taxonomy ID Gene ID Gene Symbol Protein gi Protein accession  \\\n0   3        9606      34       ACADM    4557231       NP_000007.1   \n1   3        9598  469356       ACADM  160961497    NP_001104286.1   \n2   3        9544  705168       ACADM  109008502    XP_001101274.1   \n3   3        9615  490207       ACADM  545503811    XP_005622188.1   \n4   3        9913  505968       ACADM  115497690    NP_001068703.1   \n\n                organism  \n0            Homo sapiens  \n1         Pan troglodytes  \n2          Macaca mulatta  \n3  Canis lupus familiaris  \n4              Bos taurus  \n\n\n print protclusdf.head()\n\ntaxid entrez GeneID gene symbol gene description protein accession.ver  \\\n0  3702      10723019   AT1G27045        AT1G27045        NP_001185103.1   \n1  3702      10723020   AT2G41231        AT2G41231        NP_001189726.1   \n2  3702      10723023   AT1G24095        AT1G24095        NP_001185076.1   \n3  3702      10723026   AT1G12855        AT1G12855        NP_001184976.1   \n4  3702      10723027   AT4G22758        AT4G22758        NP_001190802.1   \n\n  mrna accession.ver length of protein  listed in column 5  \\\n0     NM_001198174.1                                   227   \n1     NM_001202797.1                                    99   \n2     NM_001198147.1                                   213   \n3     NM_001198047.1                                   462   \n4     NM_001203873.1                                   255   \n\n  -11) contains data about gene location on the genome  \\\n0                                          240254421     \n1                                          240254678     \n2                                          240254421     \n3                                          240254421     \n4                                          240256243     \n\n  starting position of gene in 0-based coordinate  \\\n0                                         9391608   \n1                                        17195291   \n2                                         8523246   \n3                                         4382159   \n4                                        11958309   \n\n  end position of the gene in 0-based coordinate strand  \\\n0                                        9393018      +   \n1                                       17195914      +   \n2                                        8524928      +   \n3                                        4383610      +   \n4                                       11960035      +   \n\n  nucleotide gi of genomic sequence where this gene is annotated  \\\n0                                          AT1G27045               \n1                                          AT2G41231               \n2                                          AT1G24095               \n3                                          AT1G12855               \n4                                          AT4G22758               \n\n               organism  \n0  Arabidopsis thaliana  \n1  Arabidopsis thaliana  \n2  Arabidopsis thaliana  \n3  Arabidopsis thaliana  \n4  Arabidopsis thaliana\n\n\n print proteinsdf.head()\n\ntaxid entrez GeneID gene symbol gene description protein accession.ver  \\\n0  3702      10723019   AT1G27045        AT1G27045        NP_001185103.1   \n1  3702      10723020   AT2G41231        AT2G41231        NP_001189725.1   \n2  3702      10723020   AT2G41231        AT2G41231        NP_001189726.1   \n3  3702      10723023   AT1G24095        AT1G24095        NP_001185076.1   \n4  3702      10723026   AT1G12855        AT1G12855        NP_001184976.1   \n\n mrna accession.ver length of protein  listed in column 5  \\\n0     NM_001198174.1                                   227   \n1     NM_001202796.1                                   104   \n2     NM_001202797.1                                    99   \n3     NM_001198147.1                                   213   \n4     NM_001198047.1                                   462   \n\n -11) contains data about gene location on the genome  \\\n0                                          240254421     \n1                                          240254678     \n2                                          240254678     \n3                                          240254421     \n4                                          240254421     \n\n starting position of gene in 0-based coordinate  \\\n0                                         9391608   \n1                                        17195291   \n2                                        17195291   \n3                                         8523246   \n4                                         4382159   \n\n end position of the gene in 0-based coordinate strand  \\\n0                                        9393018      +   \n1                                       17195914      +   \n2                                       17195914      +   \n3                                        8524928      +   \n4                                        4383610      +   \n\n nucleotide gi of genomic sequence where this gene is annotated  \\\n0                                          AT1G27045               \n1                                          AT2G41231               \n2                                          AT2G41231               \n3                                          AT1G24095               \n4                                          AT1G12855               \n\n              organism  \n0  Arabidopsis thaliana  \n1  Arabidopsis thaliana  \n2  Arabidopsis thaliana  \n3  Arabidopsis thaliana  \n4  Arabidopsis thaliana", 
            "title": "homology"
        }, 
        {
            "location": "/modules/homology/#gethomologene", 
            "text": "Returns NBCI's Homolog Gene tables.  getHomoloGene(taxfile=\"build_inputs/taxid_taxname\", genefile=\"homologene.data\", proteinsfile=\"build_inputs/all_proteins.data\", proteinsclusterfile=\"build_inputs/proteins_for_clustering.data\", baseURL=\"http://ftp.ncbi.nih.gov/pub/HomoloGene/current/\")   taxfile  path to local file or to baseURL/taxfile, default=\"build_inputs/taxid_taxname\",  genefile  path to local file or to baseURL/genefile, defult=\"homologene.data\"  proteinsfile  path to local file or to baseURL/proteinsfile, default=\"build_inputs/all_proteins.data\"  proteinsclusterfile  path to local file or to baseURL/proteinsclusterfile, default=\"build_inputs/proteins_for_clustering.data\"  baseURL  baseURL for downloading files, default=\"http://ftp.ncbi.nih.gov/pub/HomoloGene/current/\"  returns genedf  Homolog gene Pandas dataframe  returns protclusdf  Pandas dataframe. Lists one protein per gene that were used for homologene clustering.\n                    If a gene has multiple protein accessions derived from alternative splicing,\n                    only one protein isoform that give most protein alignment to proteins in other species\n                    was selected for clustering and it is listed in this file.  returns proteinsdf  Pandas dataframe. Lists all proteins and their gene information.\n                    If a gene has multple protein accessions derived from alternative splicing event,\n                    each protein accession is list in a separate line.    import AGEpy as age  genedf, protclusdf, proteinsdf = age.getHomoloGene()  print genedf.head()\n\nHID Taxonomy ID Gene ID Gene Symbol Protein gi Protein accession  \\\n0   3        9606      34       ACADM    4557231       NP_000007.1   \n1   3        9598  469356       ACADM  160961497    NP_001104286.1   \n2   3        9544  705168       ACADM  109008502    XP_001101274.1   \n3   3        9615  490207       ACADM  545503811    XP_005622188.1   \n4   3        9913  505968       ACADM  115497690    NP_001068703.1   \n\n                organism  \n0            Homo sapiens  \n1         Pan troglodytes  \n2          Macaca mulatta  \n3  Canis lupus familiaris  \n4              Bos taurus    print protclusdf.head()\n\ntaxid entrez GeneID gene symbol gene description protein accession.ver  \\\n0  3702      10723019   AT1G27045        AT1G27045        NP_001185103.1   \n1  3702      10723020   AT2G41231        AT2G41231        NP_001189726.1   \n2  3702      10723023   AT1G24095        AT1G24095        NP_001185076.1   \n3  3702      10723026   AT1G12855        AT1G12855        NP_001184976.1   \n4  3702      10723027   AT4G22758        AT4G22758        NP_001190802.1   \n\n  mrna accession.ver length of protein  listed in column 5  \\\n0     NM_001198174.1                                   227   \n1     NM_001202797.1                                    99   \n2     NM_001198147.1                                   213   \n3     NM_001198047.1                                   462   \n4     NM_001203873.1                                   255   \n\n  -11) contains data about gene location on the genome  \\\n0                                          240254421     \n1                                          240254678     \n2                                          240254421     \n3                                          240254421     \n4                                          240256243     \n\n  starting position of gene in 0-based coordinate  \\\n0                                         9391608   \n1                                        17195291   \n2                                         8523246   \n3                                         4382159   \n4                                        11958309   \n\n  end position of the gene in 0-based coordinate strand  \\\n0                                        9393018      +   \n1                                       17195914      +   \n2                                        8524928      +   \n3                                        4383610      +   \n4                                       11960035      +   \n\n  nucleotide gi of genomic sequence where this gene is annotated  \\\n0                                          AT1G27045               \n1                                          AT2G41231               \n2                                          AT1G24095               \n3                                          AT1G12855               \n4                                          AT4G22758               \n\n               organism  \n0  Arabidopsis thaliana  \n1  Arabidopsis thaliana  \n2  Arabidopsis thaliana  \n3  Arabidopsis thaliana  \n4  Arabidopsis thaliana  print proteinsdf.head()\n\ntaxid entrez GeneID gene symbol gene description protein accession.ver  \\\n0  3702      10723019   AT1G27045        AT1G27045        NP_001185103.1   \n1  3702      10723020   AT2G41231        AT2G41231        NP_001189725.1   \n2  3702      10723020   AT2G41231        AT2G41231        NP_001189726.1   \n3  3702      10723023   AT1G24095        AT1G24095        NP_001185076.1   \n4  3702      10723026   AT1G12855        AT1G12855        NP_001184976.1   \n\n mrna accession.ver length of protein  listed in column 5  \\\n0     NM_001198174.1                                   227   \n1     NM_001202796.1                                   104   \n2     NM_001202797.1                                    99   \n3     NM_001198147.1                                   213   \n4     NM_001198047.1                                   462   \n\n -11) contains data about gene location on the genome  \\\n0                                          240254421     \n1                                          240254678     \n2                                          240254678     \n3                                          240254421     \n4                                          240254421     \n\n starting position of gene in 0-based coordinate  \\\n0                                         9391608   \n1                                        17195291   \n2                                        17195291   \n3                                         8523246   \n4                                         4382159   \n\n end position of the gene in 0-based coordinate strand  \\\n0                                        9393018      +   \n1                                       17195914      +   \n2                                       17195914      +   \n3                                        8524928      +   \n4                                        4383610      +   \n\n nucleotide gi of genomic sequence where this gene is annotated  \\\n0                                          AT1G27045               \n1                                          AT2G41231               \n2                                          AT2G41231               \n3                                          AT1G24095               \n4                                          AT1G12855               \n\n              organism  \n0  Arabidopsis thaliana  \n1  Arabidopsis thaliana  \n2  Arabidopsis thaliana  \n3  Arabidopsis thaliana  \n4  Arabidopsis thaliana", 
            "title": "getHomoloGene"
        }, 
        {
            "location": "/modules/kegg/", 
            "text": "organismsKEGG\n\n\nLists all organisms present in the KEGG database.\n\n\norganismsKEGG()\n\n\n\n\nreturns\n a dataframe containing one organism per row.\n\n\n\n\n import AGEpy as age\n\n KEGGo=age.organismsKEGG()\n\n print KEGGo.head()\n\n0    1                                                  2  \\\n0  T01001  hsa                               Homo sapiens (human)   \n1  T01005  ptr                       Pan troglodytes (chimpanzee)   \n2  T02283  pps                              Pan paniscus (bonobo)   \n3  T02442  ggo  Gorilla gorilla gorilla (western lowland gorilla)   \n4  T01416  pon                  Pongo abelii (Sumatran orangutan)   \n\n                                 3  \n0  Eukaryotes;Animals;Vertebrates;Mammals  \n1  Eukaryotes;Animals;Vertebrates;Mammals  \n2  Eukaryotes;Animals;Vertebrates;Mammals  \n3  Eukaryotes;Animals;Vertebrates;Mammals  \n4  Eukaryotes;Animals;Vertebrates;Mammals\n\n\n\n\n\n\ndatabasesKEGG\n\n\nFinds KEGG database identifiers for a respective organism given example ensembl ids.\n\n\ndatabasesKEGG(organism,ens_ids)\n\n\n\n\norganism\n an organism as listed in organismsKEGG()\n\n\nens_ids\n a list of ensenbl ids of the respective organism\n\n\nreturns\n nothing if no database was found, or a string if a database was found\n\n\n\n\n import AGEpy as age\n\n print sigGenes[:10]\n\n['ENSG00000272449', 'ENSG00000130762', 'ENSG00000083444', 'ENSG00000162493', 'ENSG00000253368', 'ENSG00000235912', 'ENSG00000169174', 'ENSG00000240563', 'ENSG00000200174', 'ENSG00000162607']\n\n\n KEGGd=age.databasesKEGG(\nhsa\n,sigGenes)\n\nFor hsa the following db was found: Ensembl\n\n\n print KEGGd.head()\n\nEnsembl\n\n\n\n\n\n\nensembl_to_kegg\n\n\nLooks up KEGG mappings of KEGG ids to ensembl ids.\n\n\nensembl_to_kegg(organism,kegg_db)\n\n\n\n\norganism\n an organisms as listed in organismsKEGG()\n\n\nkegg_db\n a matching KEGG db as reported in databasesKEGG\n\n\nreturns\n a Pandas dataframe of with 'KEGGid' and 'ENSid'.\n\n\n\n\n import AGEpy as age\n\n KEGGi=age.ensembl_to_kegg(\nhsa\n,\nEnsembl\n)\n\nKEGG API: http://rest.genome.jp/link/Ensembl/hsa\n\n\n print KEGGi.head()\n\nKEGGid            ENSid\n0      hsa:1  ENSG00000121410\n1     hsa:10  ENSG00000156006\n2    hsa:100  ENSG00000196839\n3   hsa:1000  ENSG00000170558\n4  hsa:10000  ENSG00000117020\n\n\n\n\n\n\necs_idsKEGG\n\n\nUses KEGG to retrieve all ids and respective ecs for a given KEGG organism.\n\n\necs_idsKEGG(organism)\n\n\n\n\norganism\n an organisms as listed in organismsKEGG()\n\n\nreturns\n a Pandas dataframe of with 'ec' and 'KEGGid'.\n\n\n\n\n import AGEpy as age\n\n KEGGie=age.ecs_idsKEGG(\nhsa\n)\n\n print KEGGie.head()\n\nec    KEGGid\n0   ec:2.7.11.1  hsa:9344\n1   ec:2.7.11.1  hsa:5894\n2   ec:2.7.11.1   hsa:673\n3   ec:2.7.12.2  hsa:5607\n4  ec:2.7.11.24  hsa:5598\n\n\n\n\n\n\nidsKEGG\n\n\nUses KEGG to retrieve all ids for a given KEGG organism.\n\n\nidsKEGG(organism)\n\n\n\n\norganism\n an organism as listed in organismsKEGG()\n\n\nreturns\n a Pandas dataframe of with 'gene_name' and 'KEGGid'.\n\n\n\n\n import AGEpy as age\n\n KEGGids = age.idsKEGG(\nhsa\n)\n\n print KEGGids.head()\n\ngene_name         KEGGid\n0      uncharacterized LOC100287010  hsa:100287010\n1      uncharacterized LOC100288846  hsa:100288846\n2                      DKFZp434L192     hsa:222029\n3  uncharacterized protein FLJ30679     hsa:146512\n4      uncharacterized LOC100128288  hsa:100128288\n\n\n\n\n\n\npathwaysKEGG\n\n\nRetrieves all pathways for a given organism.\n\n\npathwaysKEGG(organism)\n\n\n\n\norganism\n an organism as listed in organismsKEGG()\n\n\nreturns df\n a Pandas dataframe with the columns 'KEGGid','pathIDs', and 'pathName'.\n\n\nreturns df_\n a Pandas dataframe with a columns for 'KEGGid', and one column for each pathway with the corresponding gene ids below\n\n\n\n\n import AGEpy as age\n\n KEGGp, KEGGp_ =age.pathwaysKEGG(\nhsa\n)\n\n print KEGGp.head()\n\nKEGGid                                             pathID  \\\n0     hsa:10  path:hsa00232, path:hsa01100, path:hsa00983, p...   \n1    hsa:100        path:hsa05340, path:hsa01100, path:hsa00230   \n2   hsa:1000                       path:hsa04514, path:hsa05412   \n3  hsa:10000  path:hsa04211, path:hsa04630, path:hsa04152, p...   \n4  hsa:10005        path:hsa01100, path:hsa00120, path:hsa04146   \n\n                                      pathName  \n0  Caffeine metabolism - Homo sapiens (human), Dr...  \n1  Primary immunodeficiency - Homo sapiens (human...  \n2  Arrhythmogenic right ventricular cardiomyopath...  \n3  Longevity regulating pathway - multiple specie...  \n4  Metabolic pathways - Homo sapiens (human), Pri...  \n\n\n print KEGGp_.head()\n\nKEGGid path:hsa04151 path:hsa00250 path:hsa05230 path:hsa00790  \\\n0  hsa:10327           NaN           NaN           NaN           NaN   \n1    hsa:124           NaN           NaN           NaN           NaN   \n2    hsa:125           NaN           NaN           NaN           NaN   \n3    hsa:126           NaN           NaN           NaN           NaN   \n4    hsa:127           NaN           NaN           NaN           NaN   \n\npath:hsa04610 path:hsa00020 path:hsa04612 path:hsa01524 path:hsa01521  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\n ...      path:hsa04672 path:hsa00730 path:hsa04670 path:hsa05168  \\\n0      ...                NaN           NaN           NaN           NaN   \n1      ...                NaN           NaN           NaN           NaN   \n2      ...                NaN           NaN           NaN           NaN   \n3      ...                NaN           NaN           NaN           NaN   \n4      ...                NaN           NaN           NaN           NaN   \n\npath:hsa00531 path:hsa00532 path:hsa00533 path:hsa00534 path:hsa04914  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\npath:hsa04340  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN  \n\n\n print KEGGp_[[\npath:hsa04151\n]].dropna().head()\n\npath:hsa04151\n27  hsa:2538\n41  hsa:5105\n42  hsa:5106\n58  hsa:57818\n66  hsa:92579\n\n\n\n\n\n\n\nKEGGmatrix\n\n\nLooks for all KEGG annotatios of an organism in biomart and the respective pathways in KEGG. It can also retrieve links to pathways figures with red labeled genes provided in a dataframe.\n\n\nKEGGmatrix(organism, dataset, query_attributes=['ensembl_gene_id', 'kegg_enzyme'], host=biomart_host, links=True, dfexp=None, kegg_db=None, database=None )\n\n\n\n\norganism\n a KEGG organism identifier\n\n\ndataset\n a biomaRt dataset\n\n\nquery_attributes\n biomaRt query attributes, the name can change but the output should stay in the same order ie. 'ensembl_gene_id','kegg_enzyme'\n\n\nhost\n biomart_host\n\n\nlinks\n if True, returns df_links\n\n\ndfexp\n a Pandas dataframe with the following columns: 'ensembl_gene_id', 'log2FC'\n\n\nkegg_db\n a KEGG database as recovered by the databasesKEGG function\n\n\ndatabase\n a biomaRt database, depecrated, default=None.\n\n\nreturns df\n a Pandas dataframe with the 'KEGGid','pathsIDs','pathName','ensembl_gene_id','kegg_enzyme'\n\n\nreturns df_\n a matrix with a column for each KEGG pathway for a given organism and the expression values in the respective dfexp in parameter\n\n\nreturns fullmatrix\n a matrix with a column for each KEGG pathway for a given organism\n\n\nreturns df_links\n a dataframe with links for each pathway and the links in the dfexp highlighted red (if df_links.\n\n\n\n\n import AGEpy as age\n\n print dge.head()\n\nensembl_gene_id    log2FC\n0  ENSG00000272449  1.859500\n1  ENSG00000130762  0.601051\n2  ENSG00000083444 -0.881957\n3  ENSG00000162493 -0.638433\n4  ENSG00000253368  0.654517\n\n\n results=age.KEGGmatrix(\nhsa\n,'hsapiens_gene_ensembl', dfexp=dge, kegg_db=\nEnsembl\n )\n\n\n print results[0]\n\nindex    KEGGid                                            pathIDs  \\\n0   58519  hsa:8813                       path:hsa00510, path:hsa01100   \n1  120375  hsa:8711                                                NaN   \n2  120515  hsa:6725                                                NaN   \n3   48229  hsa:6714  path:hsa04360, path:hsa04611, path:hsa05100, p...   \n4   20996  hsa:2534  path:hsa04725, path:hsa04360, path:hsa05416, p...   \n\n                                        pathName  ensembl_gene_id  \\\n0  Metabolic pathways - Homo sapiens (human), N-G...  ENSG00000000419   \n1                                                NaN  ENSG00000000938   \n2                                                NaN  ENSG00000000938   \n3  Mitophagy - animal - Homo sapiens (human), EGF...  ENSG00000000938   \n4  Axon guidance - Homo sapiens (human), Adherens...  ENSG00000000938   \n\nkegg_enzyme  \n0  ec:2.4.1.83  \n1  ec:2.7.10.2  \n2  ec:2.7.10.2  \n3  ec:2.7.10.2  \n4  ec:2.7.10.2  \n\n\n print results[1]\n\nensembl_gene_id  kegg_enzyme     KEGGid    log2FC  path:hsa04151  \\\n26   ENSG00000149930  ec:2.7.11.1  hsa:10000  0.456776       0.456776   \n251  ENSG00000183421  ec:2.7.11.1  hsa:10000  0.407559       0.407559   \n476  ENSG00000112079  ec:2.7.11.1  hsa:10000 -0.498607      -0.498607   \n701  ENSG00000196730  ec:2.7.11.1  hsa:10000  0.920654       0.920654   \n926  ENSG00000123572  ec:2.7.11.1  hsa:10000  2.108620       2.108620   \n\npath:hsa00250  path:hsa05230  path:hsa00790  path:hsa04610  \\\n26             NaN       0.456776            NaN            NaN   \n251            NaN       0.407559            NaN            NaN   \n476            NaN      -0.498607            NaN            NaN   \n701            NaN       0.920654            NaN            NaN   \n926            NaN       2.108620            NaN            NaN   \n\npath:hsa00020      ...        path:hsa04672  path:hsa00730  \\\n26             NaN      ...                  NaN            NaN   \n251            NaN      ...                  NaN            NaN   \n476            NaN      ...                  NaN            NaN   \n701            NaN      ...                  NaN            NaN   \n926            NaN      ...                  NaN            NaN   \n\npath:hsa04670  path:hsa05168  path:hsa00531  path:hsa00532  \\\n26             NaN            NaN            NaN            NaN   \n251            NaN            NaN            NaN            NaN   \n476            NaN            NaN            NaN            NaN   \n701            NaN            NaN            NaN            NaN   \n926            NaN            NaN            NaN            NaN   \n\npath:hsa00533  path:hsa00534  path:hsa04914  path:hsa04340  \n26             NaN            NaN       0.456776            NaN  \n251            NaN            NaN       0.407559            NaN  \n476            NaN            NaN      -0.498607            NaN  \n701            NaN            NaN       0.920654            NaN  \n926            NaN            NaN       2.108620            NaN  \n\n\n print results[2]\n\nKEGGid path:hsa04151 path:hsa00250 path:hsa05230 path:hsa00790  \\\n0  hsa:10327           NaN           NaN           NaN           NaN   \n1    hsa:124           NaN           NaN           NaN           NaN   \n2    hsa:125           NaN           NaN           NaN           NaN   \n3    hsa:126           NaN           NaN           NaN           NaN   \n4    hsa:127           NaN           NaN           NaN           NaN   \n\npath:hsa04610 path:hsa00020 path:hsa04612 path:hsa01524 path:hsa01521  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\n ...      path:hsa04672 path:hsa00730 path:hsa04670 path:hsa05168  \\\n0      ...                NaN           NaN           NaN           NaN   \n1      ...                NaN           NaN           NaN           NaN   \n2      ...                NaN           NaN           NaN           NaN   \n3      ...                NaN           NaN           NaN           NaN   \n4      ...                NaN           NaN           NaN           NaN   \n\npath:hsa00531 path:hsa00532 path:hsa00533 path:hsa00534 path:hsa04914  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\npath:hsa04340  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN  \n\n\n print results[3]\n\nURL   pathway\n0  http://www.kegg.jp/kegg-bin/show_pathway?hsa04...  hsa04151\n1  http://www.kegg.jp/kegg-bin/show_pathway?hsa00...  hsa00250\n2  http://www.kegg.jp/kegg-bin/show_pathway?hsa05...  hsa05230\n3  http://www.kegg.jp/kegg-bin/show_pathway?hsa00...  hsa00790\n4  http://www.kegg.jp/kegg-bin/show_pathway?hsa04...  hsa04610\n\n\n print results[3].loc[0,\nURL\n]\n\nhttp://www.kegg.jp/kegg-bin/show_pathway?hsa04151/ec:2.7.11.1%09red/ec:2.7.11.22%09red/ec:2.7.10.1%09red/ec:3.1.3.16%09red/ec:2.7.10.2%09red/ec:2.3.2.27%09red/ec:1.14.13.39%09red/ec:2.7.12.2%09red/ec:3.1.3.48%09red", 
            "title": "kegg"
        }, 
        {
            "location": "/modules/kegg/#organismskegg", 
            "text": "Lists all organisms present in the KEGG database.  organismsKEGG()   returns  a dataframe containing one organism per row.    import AGEpy as age  KEGGo=age.organismsKEGG()  print KEGGo.head()\n\n0    1                                                  2  \\\n0  T01001  hsa                               Homo sapiens (human)   \n1  T01005  ptr                       Pan troglodytes (chimpanzee)   \n2  T02283  pps                              Pan paniscus (bonobo)   \n3  T02442  ggo  Gorilla gorilla gorilla (western lowland gorilla)   \n4  T01416  pon                  Pongo abelii (Sumatran orangutan)   \n\n                                 3  \n0  Eukaryotes;Animals;Vertebrates;Mammals  \n1  Eukaryotes;Animals;Vertebrates;Mammals  \n2  Eukaryotes;Animals;Vertebrates;Mammals  \n3  Eukaryotes;Animals;Vertebrates;Mammals  \n4  Eukaryotes;Animals;Vertebrates;Mammals", 
            "title": "organismsKEGG"
        }, 
        {
            "location": "/modules/kegg/#databaseskegg", 
            "text": "Finds KEGG database identifiers for a respective organism given example ensembl ids.  databasesKEGG(organism,ens_ids)   organism  an organism as listed in organismsKEGG()  ens_ids  a list of ensenbl ids of the respective organism  returns  nothing if no database was found, or a string if a database was found    import AGEpy as age  print sigGenes[:10]\n\n['ENSG00000272449', 'ENSG00000130762', 'ENSG00000083444', 'ENSG00000162493', 'ENSG00000253368', 'ENSG00000235912', 'ENSG00000169174', 'ENSG00000240563', 'ENSG00000200174', 'ENSG00000162607']  KEGGd=age.databasesKEGG( hsa ,sigGenes)\n\nFor hsa the following db was found: Ensembl  print KEGGd.head()\n\nEnsembl", 
            "title": "databasesKEGG"
        }, 
        {
            "location": "/modules/kegg/#ensembl_to_kegg", 
            "text": "Looks up KEGG mappings of KEGG ids to ensembl ids.  ensembl_to_kegg(organism,kegg_db)   organism  an organisms as listed in organismsKEGG()  kegg_db  a matching KEGG db as reported in databasesKEGG  returns  a Pandas dataframe of with 'KEGGid' and 'ENSid'.    import AGEpy as age  KEGGi=age.ensembl_to_kegg( hsa , Ensembl )\n\nKEGG API: http://rest.genome.jp/link/Ensembl/hsa  print KEGGi.head()\n\nKEGGid            ENSid\n0      hsa:1  ENSG00000121410\n1     hsa:10  ENSG00000156006\n2    hsa:100  ENSG00000196839\n3   hsa:1000  ENSG00000170558\n4  hsa:10000  ENSG00000117020", 
            "title": "ensembl_to_kegg"
        }, 
        {
            "location": "/modules/kegg/#ecs_idskegg", 
            "text": "Uses KEGG to retrieve all ids and respective ecs for a given KEGG organism.  ecs_idsKEGG(organism)   organism  an organisms as listed in organismsKEGG()  returns  a Pandas dataframe of with 'ec' and 'KEGGid'.    import AGEpy as age  KEGGie=age.ecs_idsKEGG( hsa )  print KEGGie.head()\n\nec    KEGGid\n0   ec:2.7.11.1  hsa:9344\n1   ec:2.7.11.1  hsa:5894\n2   ec:2.7.11.1   hsa:673\n3   ec:2.7.12.2  hsa:5607\n4  ec:2.7.11.24  hsa:5598", 
            "title": "ecs_idsKEGG"
        }, 
        {
            "location": "/modules/kegg/#idskegg", 
            "text": "Uses KEGG to retrieve all ids for a given KEGG organism.  idsKEGG(organism)   organism  an organism as listed in organismsKEGG()  returns  a Pandas dataframe of with 'gene_name' and 'KEGGid'.    import AGEpy as age  KEGGids = age.idsKEGG( hsa )  print KEGGids.head()\n\ngene_name         KEGGid\n0      uncharacterized LOC100287010  hsa:100287010\n1      uncharacterized LOC100288846  hsa:100288846\n2                      DKFZp434L192     hsa:222029\n3  uncharacterized protein FLJ30679     hsa:146512\n4      uncharacterized LOC100128288  hsa:100128288", 
            "title": "idsKEGG"
        }, 
        {
            "location": "/modules/kegg/#pathwayskegg", 
            "text": "Retrieves all pathways for a given organism.  pathwaysKEGG(organism)   organism  an organism as listed in organismsKEGG()  returns df  a Pandas dataframe with the columns 'KEGGid','pathIDs', and 'pathName'.  returns df_  a Pandas dataframe with a columns for 'KEGGid', and one column for each pathway with the corresponding gene ids below    import AGEpy as age  KEGGp, KEGGp_ =age.pathwaysKEGG( hsa )  print KEGGp.head()\n\nKEGGid                                             pathID  \\\n0     hsa:10  path:hsa00232, path:hsa01100, path:hsa00983, p...   \n1    hsa:100        path:hsa05340, path:hsa01100, path:hsa00230   \n2   hsa:1000                       path:hsa04514, path:hsa05412   \n3  hsa:10000  path:hsa04211, path:hsa04630, path:hsa04152, p...   \n4  hsa:10005        path:hsa01100, path:hsa00120, path:hsa04146   \n\n                                      pathName  \n0  Caffeine metabolism - Homo sapiens (human), Dr...  \n1  Primary immunodeficiency - Homo sapiens (human...  \n2  Arrhythmogenic right ventricular cardiomyopath...  \n3  Longevity regulating pathway - multiple specie...  \n4  Metabolic pathways - Homo sapiens (human), Pri...    print KEGGp_.head()\n\nKEGGid path:hsa04151 path:hsa00250 path:hsa05230 path:hsa00790  \\\n0  hsa:10327           NaN           NaN           NaN           NaN   \n1    hsa:124           NaN           NaN           NaN           NaN   \n2    hsa:125           NaN           NaN           NaN           NaN   \n3    hsa:126           NaN           NaN           NaN           NaN   \n4    hsa:127           NaN           NaN           NaN           NaN   \n\npath:hsa04610 path:hsa00020 path:hsa04612 path:hsa01524 path:hsa01521  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\n ...      path:hsa04672 path:hsa00730 path:hsa04670 path:hsa05168  \\\n0      ...                NaN           NaN           NaN           NaN   \n1      ...                NaN           NaN           NaN           NaN   \n2      ...                NaN           NaN           NaN           NaN   \n3      ...                NaN           NaN           NaN           NaN   \n4      ...                NaN           NaN           NaN           NaN   \n\npath:hsa00531 path:hsa00532 path:hsa00533 path:hsa00534 path:hsa04914  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\npath:hsa04340  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN    print KEGGp_[[ path:hsa04151 ]].dropna().head()\n\npath:hsa04151\n27  hsa:2538\n41  hsa:5105\n42  hsa:5106\n58  hsa:57818\n66  hsa:92579", 
            "title": "pathwaysKEGG"
        }, 
        {
            "location": "/modules/kegg/#keggmatrix", 
            "text": "Looks for all KEGG annotatios of an organism in biomart and the respective pathways in KEGG. It can also retrieve links to pathways figures with red labeled genes provided in a dataframe.  KEGGmatrix(organism, dataset, query_attributes=['ensembl_gene_id', 'kegg_enzyme'], host=biomart_host, links=True, dfexp=None, kegg_db=None, database=None )   organism  a KEGG organism identifier  dataset  a biomaRt dataset  query_attributes  biomaRt query attributes, the name can change but the output should stay in the same order ie. 'ensembl_gene_id','kegg_enzyme'  host  biomart_host  links  if True, returns df_links  dfexp  a Pandas dataframe with the following columns: 'ensembl_gene_id', 'log2FC'  kegg_db  a KEGG database as recovered by the databasesKEGG function  database  a biomaRt database, depecrated, default=None.  returns df  a Pandas dataframe with the 'KEGGid','pathsIDs','pathName','ensembl_gene_id','kegg_enzyme'  returns df_  a matrix with a column for each KEGG pathway for a given organism and the expression values in the respective dfexp in parameter  returns fullmatrix  a matrix with a column for each KEGG pathway for a given organism  returns df_links  a dataframe with links for each pathway and the links in the dfexp highlighted red (if df_links.    import AGEpy as age  print dge.head()\n\nensembl_gene_id    log2FC\n0  ENSG00000272449  1.859500\n1  ENSG00000130762  0.601051\n2  ENSG00000083444 -0.881957\n3  ENSG00000162493 -0.638433\n4  ENSG00000253368  0.654517  results=age.KEGGmatrix( hsa ,'hsapiens_gene_ensembl', dfexp=dge, kegg_db= Ensembl  )  print results[0]\n\nindex    KEGGid                                            pathIDs  \\\n0   58519  hsa:8813                       path:hsa00510, path:hsa01100   \n1  120375  hsa:8711                                                NaN   \n2  120515  hsa:6725                                                NaN   \n3   48229  hsa:6714  path:hsa04360, path:hsa04611, path:hsa05100, p...   \n4   20996  hsa:2534  path:hsa04725, path:hsa04360, path:hsa05416, p...   \n\n                                        pathName  ensembl_gene_id  \\\n0  Metabolic pathways - Homo sapiens (human), N-G...  ENSG00000000419   \n1                                                NaN  ENSG00000000938   \n2                                                NaN  ENSG00000000938   \n3  Mitophagy - animal - Homo sapiens (human), EGF...  ENSG00000000938   \n4  Axon guidance - Homo sapiens (human), Adherens...  ENSG00000000938   \n\nkegg_enzyme  \n0  ec:2.4.1.83  \n1  ec:2.7.10.2  \n2  ec:2.7.10.2  \n3  ec:2.7.10.2  \n4  ec:2.7.10.2    print results[1]\n\nensembl_gene_id  kegg_enzyme     KEGGid    log2FC  path:hsa04151  \\\n26   ENSG00000149930  ec:2.7.11.1  hsa:10000  0.456776       0.456776   \n251  ENSG00000183421  ec:2.7.11.1  hsa:10000  0.407559       0.407559   \n476  ENSG00000112079  ec:2.7.11.1  hsa:10000 -0.498607      -0.498607   \n701  ENSG00000196730  ec:2.7.11.1  hsa:10000  0.920654       0.920654   \n926  ENSG00000123572  ec:2.7.11.1  hsa:10000  2.108620       2.108620   \n\npath:hsa00250  path:hsa05230  path:hsa00790  path:hsa04610  \\\n26             NaN       0.456776            NaN            NaN   \n251            NaN       0.407559            NaN            NaN   \n476            NaN      -0.498607            NaN            NaN   \n701            NaN       0.920654            NaN            NaN   \n926            NaN       2.108620            NaN            NaN   \n\npath:hsa00020      ...        path:hsa04672  path:hsa00730  \\\n26             NaN      ...                  NaN            NaN   \n251            NaN      ...                  NaN            NaN   \n476            NaN      ...                  NaN            NaN   \n701            NaN      ...                  NaN            NaN   \n926            NaN      ...                  NaN            NaN   \n\npath:hsa04670  path:hsa05168  path:hsa00531  path:hsa00532  \\\n26             NaN            NaN            NaN            NaN   \n251            NaN            NaN            NaN            NaN   \n476            NaN            NaN            NaN            NaN   \n701            NaN            NaN            NaN            NaN   \n926            NaN            NaN            NaN            NaN   \n\npath:hsa00533  path:hsa00534  path:hsa04914  path:hsa04340  \n26             NaN            NaN       0.456776            NaN  \n251            NaN            NaN       0.407559            NaN  \n476            NaN            NaN      -0.498607            NaN  \n701            NaN            NaN       0.920654            NaN  \n926            NaN            NaN       2.108620            NaN    print results[2]\n\nKEGGid path:hsa04151 path:hsa00250 path:hsa05230 path:hsa00790  \\\n0  hsa:10327           NaN           NaN           NaN           NaN   \n1    hsa:124           NaN           NaN           NaN           NaN   \n2    hsa:125           NaN           NaN           NaN           NaN   \n3    hsa:126           NaN           NaN           NaN           NaN   \n4    hsa:127           NaN           NaN           NaN           NaN   \n\npath:hsa04610 path:hsa00020 path:hsa04612 path:hsa01524 path:hsa01521  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\n ...      path:hsa04672 path:hsa00730 path:hsa04670 path:hsa05168  \\\n0      ...                NaN           NaN           NaN           NaN   \n1      ...                NaN           NaN           NaN           NaN   \n2      ...                NaN           NaN           NaN           NaN   \n3      ...                NaN           NaN           NaN           NaN   \n4      ...                NaN           NaN           NaN           NaN   \n\npath:hsa00531 path:hsa00532 path:hsa00533 path:hsa00534 path:hsa04914  \\\n0           NaN           NaN           NaN           NaN           NaN   \n1           NaN           NaN           NaN           NaN           NaN   \n2           NaN           NaN           NaN           NaN           NaN   \n3           NaN           NaN           NaN           NaN           NaN   \n4           NaN           NaN           NaN           NaN           NaN   \n\npath:hsa04340  \n0           NaN  \n1           NaN  \n2           NaN  \n3           NaN  \n4           NaN    print results[3]\n\nURL   pathway\n0  http://www.kegg.jp/kegg-bin/show_pathway?hsa04...  hsa04151\n1  http://www.kegg.jp/kegg-bin/show_pathway?hsa00...  hsa00250\n2  http://www.kegg.jp/kegg-bin/show_pathway?hsa05...  hsa05230\n3  http://www.kegg.jp/kegg-bin/show_pathway?hsa00...  hsa00790\n4  http://www.kegg.jp/kegg-bin/show_pathway?hsa04...  hsa04610  print results[3].loc[0, URL ]\n\nhttp://www.kegg.jp/kegg-bin/show_pathway?hsa04151/ec:2.7.11.1%09red/ec:2.7.11.22%09red/ec:2.7.10.1%09red/ec:3.1.3.16%09red/ec:2.7.10.2%09red/ec:2.3.2.27%09red/ec:1.14.13.39%09red/ec:2.7.12.2%09red/ec:3.1.3.48%09red", 
            "title": "KEGGmatrix"
        }, 
        {
            "location": "/modules/meme/", 
            "text": "filterMotifs\n\n\nSelectes motifs from a meme file based on the number of sites.\n\n\nfilterMotifs(memeFile,outFile, minSites)\n\n\n\n\nmemeFile\n MEME file to be read\n\n\noutFile\n MEME file to be written\n\n\nminSites\n minimum number of sites each motif needs to have to be valid\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n age.filterMotifs(\n/path/to/input.meme\n,\n/path/to/output.meme\n, 15)", 
            "title": "meme"
        }, 
        {
            "location": "/modules/meme/#filtermotifs", 
            "text": "Selectes motifs from a meme file based on the number of sites.  filterMotifs(memeFile,outFile, minSites)   memeFile  MEME file to be read  outFile  MEME file to be written  minSites  minimum number of sites each motif needs to have to be valid  returns  nothing    import AGEpy as age  age.filterMotifs( /path/to/input.meme , /path/to/output.meme , 15)", 
            "title": "filterMotifs"
        }, 
        {
            "location": "/modules/plots/", 
            "text": "CellPlot\n\n\nPython implementation of the CellPlot from the CellPlot package for R.\n-inf or inf enrichments will come out as min found float or max found float, respectively.\n\n\nCellPlot(df, output_file=None, gene_expression=\"log2FC\", figure_title=\"CellPlot\", pvalCol=\"elimFisher\", lowerLimit=None, upperLimit=None, colorBarType='Spectral')\n\n\n\n\ndf\n pandas dataframe with the following columns - 'Enrichment', 'Term', and 'log2fc'.\n           For log2fc each cell must contain a comma separated string with the log2fc for the genes enriched in the respective term.\n           eg. '-inf,-1,2,3.4,3.66,inf'\n\n\noutput_file\n prefix for an output file. If given it will create output_file.CellPlot.svg and output_file.CellPlot.png\n\n\ngene_expression\n label for the color gradiant bar.\n\n\nfigure_title\n Figure title.\n\n\npvalCol\n name of the column containing the p values to determine if the terms should be marked as NS - not significant, use None for no marking\n\n\nlowerLimit\n lower limit for the heatmap bar (default is the 0.1 percentile)\n\n\nupperLimit\n upper limit for the heatmap bar (default is the 0.9 percentile)\n\n\ncolorBarType\n type of heatmap, 'Spectral' is default, alternative eg. 'seismic'\n\n\nreturns\n a matplotlib figure\n\n\n\n\n import AGEpy as age\n\n print df.head()\n\nTerm  Annotated  Enrichment  \\\n0          GO:0008544~epidermis development         38    4.006021   \n1               GO:0043588~skin development         33    4.359840   \n2         GO:0045087~innate immune response         61    2.385984   \n3               GO:0006952~defense response         90    1.913315   \n4  GO:0009605~response to external stimulus        113    1.736641   \n\nease                                             log2fc  \n0  1.193931e-12  1.13845,0.771811,0.926561,0.578588,-0.694105,1...  \n1  4.757460e-12  1.13845,0.926561,-0.694105,1.48945,0.94486,-1....  \n2  5.609421e-10  -1.91507,-0.630414,-1.87466,-0.898252,0.458041...  \n3  2.238959e-09  -0.538926,0.667335,-1.91507,-0.630414,-1.87466...  \n4  3.051460e-09  0.667335,-1.91507,-0.630414,1.46227,0.755911,-...  \n\n\n cellplot=age.CellPlot(df[:20], \ncellplot\n,  \nlog2(mt/wt)\n, \nmutant 1\n, \\\npvalCol=\nease\n, colorBarType=\nbwr\n, lowerLimit=-1.25,upperLimit=1.25)\n\n\n\n\n\n\n\n\nSymPlot\n\n\nPython implementation of the SymPlot from the CellPlot package for R.\n-inf or inf enrichments will come out as min found float or max found float, respectively.\n\n\nSymPlot(df,output_file=None,figure_title=\"SymPlot\",pvalCol=\"elimFisher\")\n\n\n\n\ndf\n pandas dataframe with the following columns - 'Enrichment', 'Significant', 'Annotated', 'Term', and 'log2fc'. 'Annotated'i stands for number of genes annotated with the respective GO term. As reported in DAVID by listHits. For log2fc each cell must contain a comma separated string with the log2fc for the genes enriched in the respective term. eg. '-inf,-1,2,3.4,3.66,inf'\n\n\noutput_file\n prefix for an output file. If given it witll create output_file.SymPlot.svg and output_file.SymPlot.png\n\n\nfigure_title\n Figure title.\n\n\npvalCol\n name of the column containing the p values to determine if the terms should be marked as NS - not significant, use None for no marking\n\n\nreturns\n a matplotlib figure\n\n\n\n\n import AGEpy as age\n\n symplot=age.SymPlot(df[:20],\nsymplot\n, \nmutant 1\n,pvalCol=\nease\n)\n\n\n\n\n\n\n\n\nMA\n\n\nPlots an MA like plot.\n\n\nMA(df, title, figName, c, daType=\"counts\", nbins=10, perc=.5, deg=3, eq=True, splines=True, spec=None, Targets=None, ylim=None, sizeRed=8)\n\n\n\n\ndf\n dataframe output of GetData()\n\n\ntitle\n plot title, 'Genes' or 'Transcripts'\n\n\nfigName\n /path/to/saved/figure/prefix\n\n\nc\n pair of samples to be plotted in list format\n\n\ndaType\n data type, ie. 'counts' or 'FPKM'\n\n\nnbins\n number of bins on normalized intensities to fit the splines\n\n\nper\n log2(fold change) percentil to which the splines will be fitted\n\n\ndeg\n degress of freedom used to fit the splines\n\n\neq\n if true assumes for each bin that the lower and upper values are equally distant to 0, taking the smaller distance for both\n\n\nsplines\n plot splines, default=True\n\n\nspec\n list of ids to be highlighted\n\n\nTargets\n list of ids that will be highlighted if outside of the fitted splines\n\n\nylim\n a list of limits to apply on the y-axis of the plot\n\n\nsizeRed\n size of the highlight marker\n\n\nreturns df_\n a Pandas dataframe similar to the GetData() output with normalized intensities and spline outbounds rows marked as 1.\n\n\nreturns red\n list of ids that are highlighted\n\n\n\n\n import AGEpy as age\n\n print df.head()\n\ngene_id                    gene  wt0  wt20  log2(wt20/wt0)  \\\n0  ENSG00000223972                 DDX11L1  0.0   0.0             NaN   \n1  ENSG00000243485  MIR1302-2,RP11-34P13.3  0.0   0.0             NaN   \n2  ENSG00000274890  MIR1302-2,RP11-34P13.3  0.0   0.0             NaN   \n3  ENSG00000268020                  OR4G4P  0.0   0.0             NaN   \n4  ENSG00000240361                 OR4G11P  0.0   0.0             NaN   \n\np_value  q_value significant  \n0      1.0      1.0          no  \n1      1.0      1.0          no  \n2      1.0      1.0          no  \n3      1.0      1.0          no  \n4      1.0      1.0          no  \n\n\n madf1,sig1=age.MA(dge_, 'Genes',\nMA1\n,[\nwt0\n,\nwt20\n], daType=\nFPKM\n)\n\n\n\n\n\n\n sigGenes=df[df[\nsignificant\n==\nyes\n]][\ngene_id\n].tolist()\n\n madf2,sig2=age.MA(dge_, 'Genes',\nMA2\n, [\nwt0\n,\nwt20\n], splines=False, daType=\nFPKM\n,spec=sigGenes)\n\n\n\n\n\n\n madf3,sig3=age.MA(dge_, 'Genes',\nMA3\n, [\nwt0\n,\nwt20\n], splines=True, daType=\nFPKM\n,Targets=sigGenes)", 
            "title": "plots"
        }, 
        {
            "location": "/modules/plots/#cellplot", 
            "text": "Python implementation of the CellPlot from the CellPlot package for R.\n-inf or inf enrichments will come out as min found float or max found float, respectively.  CellPlot(df, output_file=None, gene_expression=\"log2FC\", figure_title=\"CellPlot\", pvalCol=\"elimFisher\", lowerLimit=None, upperLimit=None, colorBarType='Spectral')   df  pandas dataframe with the following columns - 'Enrichment', 'Term', and 'log2fc'.\n           For log2fc each cell must contain a comma separated string with the log2fc for the genes enriched in the respective term.\n           eg. '-inf,-1,2,3.4,3.66,inf'  output_file  prefix for an output file. If given it will create output_file.CellPlot.svg and output_file.CellPlot.png  gene_expression  label for the color gradiant bar.  figure_title  Figure title.  pvalCol  name of the column containing the p values to determine if the terms should be marked as NS - not significant, use None for no marking  lowerLimit  lower limit for the heatmap bar (default is the 0.1 percentile)  upperLimit  upper limit for the heatmap bar (default is the 0.9 percentile)  colorBarType  type of heatmap, 'Spectral' is default, alternative eg. 'seismic'  returns  a matplotlib figure    import AGEpy as age  print df.head()\n\nTerm  Annotated  Enrichment  \\\n0          GO:0008544~epidermis development         38    4.006021   \n1               GO:0043588~skin development         33    4.359840   \n2         GO:0045087~innate immune response         61    2.385984   \n3               GO:0006952~defense response         90    1.913315   \n4  GO:0009605~response to external stimulus        113    1.736641   \n\nease                                             log2fc  \n0  1.193931e-12  1.13845,0.771811,0.926561,0.578588,-0.694105,1...  \n1  4.757460e-12  1.13845,0.926561,-0.694105,1.48945,0.94486,-1....  \n2  5.609421e-10  -1.91507,-0.630414,-1.87466,-0.898252,0.458041...  \n3  2.238959e-09  -0.538926,0.667335,-1.91507,-0.630414,-1.87466...  \n4  3.051460e-09  0.667335,-1.91507,-0.630414,1.46227,0.755911,-...    cellplot=age.CellPlot(df[:20],  cellplot ,   log2(mt/wt) ,  mutant 1 , \\\npvalCol= ease , colorBarType= bwr , lowerLimit=-1.25,upperLimit=1.25)", 
            "title": "CellPlot"
        }, 
        {
            "location": "/modules/plots/#symplot", 
            "text": "Python implementation of the SymPlot from the CellPlot package for R.\n-inf or inf enrichments will come out as min found float or max found float, respectively.  SymPlot(df,output_file=None,figure_title=\"SymPlot\",pvalCol=\"elimFisher\")   df  pandas dataframe with the following columns - 'Enrichment', 'Significant', 'Annotated', 'Term', and 'log2fc'. 'Annotated'i stands for number of genes annotated with the respective GO term. As reported in DAVID by listHits. For log2fc each cell must contain a comma separated string with the log2fc for the genes enriched in the respective term. eg. '-inf,-1,2,3.4,3.66,inf'  output_file  prefix for an output file. If given it witll create output_file.SymPlot.svg and output_file.SymPlot.png  figure_title  Figure title.  pvalCol  name of the column containing the p values to determine if the terms should be marked as NS - not significant, use None for no marking  returns  a matplotlib figure    import AGEpy as age  symplot=age.SymPlot(df[:20], symplot ,  mutant 1 ,pvalCol= ease )", 
            "title": "SymPlot"
        }, 
        {
            "location": "/modules/plots/#ma", 
            "text": "Plots an MA like plot.  MA(df, title, figName, c, daType=\"counts\", nbins=10, perc=.5, deg=3, eq=True, splines=True, spec=None, Targets=None, ylim=None, sizeRed=8)   df  dataframe output of GetData()  title  plot title, 'Genes' or 'Transcripts'  figName  /path/to/saved/figure/prefix  c  pair of samples to be plotted in list format  daType  data type, ie. 'counts' or 'FPKM'  nbins  number of bins on normalized intensities to fit the splines  per  log2(fold change) percentil to which the splines will be fitted  deg  degress of freedom used to fit the splines  eq  if true assumes for each bin that the lower and upper values are equally distant to 0, taking the smaller distance for both  splines  plot splines, default=True  spec  list of ids to be highlighted  Targets  list of ids that will be highlighted if outside of the fitted splines  ylim  a list of limits to apply on the y-axis of the plot  sizeRed  size of the highlight marker  returns df_  a Pandas dataframe similar to the GetData() output with normalized intensities and spline outbounds rows marked as 1.  returns red  list of ids that are highlighted    import AGEpy as age  print df.head()\n\ngene_id                    gene  wt0  wt20  log2(wt20/wt0)  \\\n0  ENSG00000223972                 DDX11L1  0.0   0.0             NaN   \n1  ENSG00000243485  MIR1302-2,RP11-34P13.3  0.0   0.0             NaN   \n2  ENSG00000274890  MIR1302-2,RP11-34P13.3  0.0   0.0             NaN   \n3  ENSG00000268020                  OR4G4P  0.0   0.0             NaN   \n4  ENSG00000240361                 OR4G11P  0.0   0.0             NaN   \n\np_value  q_value significant  \n0      1.0      1.0          no  \n1      1.0      1.0          no  \n2      1.0      1.0          no  \n3      1.0      1.0          no  \n4      1.0      1.0          no    madf1,sig1=age.MA(dge_, 'Genes', MA1 ,[ wt0 , wt20 ], daType= FPKM )    sigGenes=df[df[ significant == yes ]][ gene_id ].tolist()  madf2,sig2=age.MA(dge_, 'Genes', MA2 , [ wt0 , wt20 ], splines=False, daType= FPKM ,spec=sigGenes)    madf3,sig3=age.MA(dge_, 'Genes', MA3 , [ wt0 , wt20 ], splines=True, daType= FPKM ,Targets=sigGenes)", 
            "title": "MA"
        }, 
        {
            "location": "/modules/sam/", 
            "text": "readSAM\n\n\nReads and parses a sam file.\n\n\nreadSAM(SAMfile,header=False)\n\n\n\n\nSAMfile\n /path/to/file.sam\n\n\nheader\n logical, if True, reads the header information\n\n\nreturns\n a pandas dataframe with the respective SAM columns: 'QNAME','FLAG','RNAME','POS','MAPQ','CIGAR','RNEXT','PNEXT','TLEN','SEQ','QUAL' and a list of the headers if header=True\n\n\n\n\n import AGEpy as age\n\n SAMdf=age.readSAM(\nsample1.sam\n)\n\n print SAMdf.head()\n\nCIGAR  \\\n0  J00137:91:HJG75BBXX:6:1101:27458:1244    4     *         0    0       *   \n1   J00137:91:HJG75BBXX:6:1101:2483:1226    4     *         0    0       *   \n2   J00137:91:HJG75BBXX:6:1101:6593:1244   16    II  11210427  255  2S146M   \n3   J00137:91:HJG75BBXX:6:1101:9293:1244    0     I  10433525  255    150M   \n4  J00137:91:HJG75BBXX:6:1101:13271:1244   16   III   5277278  255    150M   \n\nRNEXT PNEXT TLEN                                                SEQ  \\\n0     *     0    0  CCAAAATCAGTTACAAAAAAATTAAATATCGAGTTCCTCCCCCAGA...   \n1     *     0    0  ACGTGACCGATGGTTGGCATGGCACGCATACCACGGAAGCGTCTGC...   \n2     *     0    0  AACAACAGCAGCAGCAGATTTACCAAAGGTTCCCAGCAAGACTAAT...   \n3     *     0    0  CTTGATTGTACTGCTGTGGTGGACCGCGTGGTCCTCCTTGTTGGTT...   \n4     *     0    0  GGACATGATGATCATGGCCACGACTCTCATGGACATAGTCATGATC...   \n\n                                              QUAL  \n0  AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...  \n1  A-\nAF7FF-AF-A\n--F-7\nFAA7FFF7-\n-\nF7JF---7--77J7...  \n2  7-AA7JF)JJJF\n--7FF--7--AAA--\nA7\n--\nA-7-A-\nFJ...  \n3  AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...  \n4  JFFAJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJ...\n\n\n\n\n\n\nwriteSAM\n\n\nWrites a pandas dataframe with the respective SAM columns: 'QNAME','FLAG','RNAME','POS','MAPQ','CIGAR','RNEXT','PNEXT','TLEN','SEQ','QUAL' into a sam file.\n\n\nwriteSAM(sam, SAMfile, header=None)\n\n\n\n\nsam\n pandas dataframe to be writen\n\n\nSAMfile\n /path/to/file.sam\n\n\nreturns\n nothing\n\n\n\n\n import AGEpy as age\n\n age.writeSAM(SAMdf,\nmodified.sam\n)\n\n\n\n\n\n\nSAMflags\n\n\nExplains a SAM flag.\n\n\nSAMflags(x)\n\n\n\n\nx\n flag\n\n\nreturns\n complete SAM flag explanation\n\n\n\n\n import AGEpy as age\n\n print age.SAMflags(64)\n\n\n\n\n[\"0: Read unpaired\",\n \"0:  Read not mapped in proper pair\",\n \"0:  Read mapped\",\n \"0:  Mate mapped\",\n \"0:  Read direct strand\",\n \"0:  Mate direct strand\",\n \"1:  First in pair\",\n \"0:  First in pair\",\n \"0:  Primary alignment\",\n \"0:  Read passes platform/vendor quality checks\",\n \"0:  Read is not PCR or optical duplicate\",\n \"0:  Not supplementary alignment\"]", 
            "title": "sam"
        }, 
        {
            "location": "/modules/sam/#readsam", 
            "text": "Reads and parses a sam file.  readSAM(SAMfile,header=False)   SAMfile  /path/to/file.sam  header  logical, if True, reads the header information  returns  a pandas dataframe with the respective SAM columns: 'QNAME','FLAG','RNAME','POS','MAPQ','CIGAR','RNEXT','PNEXT','TLEN','SEQ','QUAL' and a list of the headers if header=True    import AGEpy as age  SAMdf=age.readSAM( sample1.sam )  print SAMdf.head()\n\nCIGAR  \\\n0  J00137:91:HJG75BBXX:6:1101:27458:1244    4     *         0    0       *   \n1   J00137:91:HJG75BBXX:6:1101:2483:1226    4     *         0    0       *   \n2   J00137:91:HJG75BBXX:6:1101:6593:1244   16    II  11210427  255  2S146M   \n3   J00137:91:HJG75BBXX:6:1101:9293:1244    0     I  10433525  255    150M   \n4  J00137:91:HJG75BBXX:6:1101:13271:1244   16   III   5277278  255    150M   \n\nRNEXT PNEXT TLEN                                                SEQ  \\\n0     *     0    0  CCAAAATCAGTTACAAAAAAATTAAATATCGAGTTCCTCCCCCAGA...   \n1     *     0    0  ACGTGACCGATGGTTGGCATGGCACGCATACCACGGAAGCGTCTGC...   \n2     *     0    0  AACAACAGCAGCAGCAGATTTACCAAAGGTTCCCAGCAAGACTAAT...   \n3     *     0    0  CTTGATTGTACTGCTGTGGTGGACCGCGTGGTCCTCCTTGTTGGTT...   \n4     *     0    0  GGACATGATGATCATGGCCACGACTCTCATGGACATAGTCATGATC...   \n\n                                              QUAL  \n0  AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...  \n1  A- AF7FF-AF-A --F-7 FAA7FFF7- - F7JF---7--77J7...  \n2  7-AA7JF)JJJF --7FF--7--AAA-- A7 -- A-7-A- FJ...  \n3  AAFFFJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ...  \n4  JFFAJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJFJJJJJJJ...", 
            "title": "readSAM"
        }, 
        {
            "location": "/modules/sam/#writesam", 
            "text": "Writes a pandas dataframe with the respective SAM columns: 'QNAME','FLAG','RNAME','POS','MAPQ','CIGAR','RNEXT','PNEXT','TLEN','SEQ','QUAL' into a sam file.  writeSAM(sam, SAMfile, header=None)   sam  pandas dataframe to be writen  SAMfile  /path/to/file.sam  returns  nothing    import AGEpy as age  age.writeSAM(SAMdf, modified.sam )", 
            "title": "writeSAM"
        }, 
        {
            "location": "/modules/sam/#samflags", 
            "text": "Explains a SAM flag.  SAMflags(x)   x  flag  returns  complete SAM flag explanation    import AGEpy as age  print age.SAMflags(64)  [\"0: Read unpaired\",\n \"0:  Read not mapped in proper pair\",\n \"0:  Read mapped\",\n \"0:  Mate mapped\",\n \"0:  Read direct strand\",\n \"0:  Mate direct strand\",\n \"1:  First in pair\",\n \"0:  First in pair\",\n \"0:  Primary alignment\",\n \"0:  Read passes platform/vendor quality checks\",\n \"0:  Read is not PCR or optical duplicate\",\n \"0:  Not supplementary alignment\"]", 
            "title": "SAMflags"
        }, 
        {
            "location": "/executables/adiff/", 
            "text": "Intro\n\n\naDiff\n is an annotation tool for differential gene expression results generated by \ncuffdiff\n (Trapnell C., \nNature Biotechnology\n, 2012).\n\n\nIt annotates \ncuffdiff\n outputs with ensembl gene ids, gene ontology terms and kegg ids.\n\n\nAdditonally it uses \nDAVID\ns API (Huang DW, \nNature Protoc.\n, 2009; Huang DW, \nNucleic Acids Res.\n, 2009; Xiaoli J, \nBioinformatics\n, 2012) to perform enrichment analysis.\n\n\nA \nCytoscape\n (Shannon P, \nGenome Research\n, 2003) instance running with the \nString\n (Szklarczyk D, \nNucleic Acids Res.\n, 2017) App installed can additionally be plugged in to generate expanded protein-protein interactions.\n\n\nFor a full RNAseq pipeline including \naDiff\n check: \nhttp://bioinformatics.age.mpg.de/presentations-tutorials/presentations/modules/rnaseq-tuxedo-update/#/intro\n\n\nExamples\n\n\nExample of an \naDiff\n call on a \nc. elegans\n dataset:\n\n\n$ aDiff -D -i cuffdiff_output -o adiff_output \\\n-G references/cel.latest.ensembl.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--dataset dmelanogaster_gene_ensembl \\\n--DAVIDuser \nRegistered.Email@david.com\n \\\n--organismtag CEL \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234\n\n\n\n\nExample of an \naDiff\n call on a \nd. melanogaster\n dataset:\n\n\n$ aDiff -D -i cuffdiff_output -o adiff_output \\\n-G references/Drosophila_melanogaster.BDGP6.90.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--dataset dmelanogaster_gene_ensembl \\\n--filter flybase_gene_id \\\n--outputBiotypes 'flybase_gene_id gene_biotype' \\\n--outputGoterms 'flybase_gene_id go_id name_1006' \\\n--DAVIDid FLYBASE_GENE_ID \\\n--DAVIDuser \nRegistered.Email@david.com\n \\\n--organismtag DMEL \\\n--species 'drosophila melanogaster' \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234\n\n\n\n\nExample of an \naDiff\n call on a \nmus musculus\n  dataset:\n\n\n$ aDiff -i cufdiff_output -o adiff_output \\\n-G ensembl.mus_musculus.83.original.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--TSV \\\n--dataset mmusculus_gene_ensembl \\\n-u \nRegistered.Email@david.com\n \\\n--DAVIDid ENSEMBL_GENE_ID \\\n--host http://dec2015.archive.ensembl.org/biomart \\\n--organismtag MUS \\\n--species 'mus musculus' \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234\n\n\n\n\nExample of an \naDiff\n call on a \nh. sapiens\n  dataset:\n\n\n$ aDiff -i cufdiff_output -o adiff_output \\\n-G ensembl.homo_sapiens.83.original.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--TSV \\\n--dataset hsapiens_gene_ensembl \\\n-u \nRegistered.Email@david.com\n \\\n--DAVIDid ENSEMBL_GENE_ID \\\n--host http://dec2015.archive.ensembl.org/biomart \\\n--organismtag HSA \\\n--species 'homo sapiens' \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234\n\n\n\n\nOutput files\n\n\nExample of the output for the the \nh. sapiens\n call above.\n\n\n\n\n\n\ndiff_sig_geneexp.xlsx\n this file is based on the \ngene_exp.diff\n file output of \ncuffdiff\n adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in \ncuffdiff\n).\n\n\n\n\n\n\ndiff_sig_iso.xlsx\n this file is based on the \nisoform_exp.diff\n file output of \ncuffdiff\n adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in \ncuffdiff\n).\n\n\n\n\n\n\ndiff_sig_prom.xlsx\n this file is based on the \npromoters.diff\n file output of \ncuffdiff\n adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in \ncuffdiff\n).\n\n\n\n\n\n\ndiff_sig_splic.xlsx\n this file is based on the \nsplicing.diff\n file output of \ncuffdiff\n adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in \ncuffdiff\n).\n\n\n\n\n\n\ndiff_sig_cds.xlsx\n htis file is based on the \ncds.diff\n file output of \ncuffdiff\n adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in \ncuffdiff\n).\n\n\n\n\n\n\ngeneexp_ALL.tsv\n this file is based on the \ngene_exp.diff\n file output of \ncuffdiff\n adding annotation columns to it.\n\n\n\n\n\n\niso_ALL.tsv\n this file is based on the \nisoform_exp.diff\n file output of \ncuffdiff\n adding annotation columns to it.\n\n\n\n\n\n\nprom_ALL.tsv\n this file is based on the \npromoters.diff\n file output of \ncuffdiff\n adding annotation columns to it.\n\n\n\n\n\n\nsplic_ALL.tsv\n this file is based on the \nsplicing.diff\n file output of \ncuffdiff\n adding annotation columns to it.\n\n\n\n\n\n\ncds_ALL.tsv\n this file is based on the \ncds.diff\n file output of \ncuffdiff\n adding annotation columns to it.\n\n\n\n\n\n\ndiff_p.05.xlsx\n contains a sheet for each of the files above (ie. \ngeneexp_ALL.tsv\n, \niso_ALL.tsv\n, \nprom_ALL.tsv\n, \nsplic_ALL.tsv\n, \ncds_ALL.tsv\n ) subset to p values bellow 0.05.\n\n\n\n\n\n\nKEGG_PATHWAY_diff_sig_geneexp.xlsx\n this file is based on the \ngene_exp.diff\n file output of \ncuffdiff\n. It generates a result sheet for each pairwise comparison. It reports DAVID enrichment results for KEGG using genes labeled as significant by \ncuffdiff\n.\n\n\n\n\n\n\nGOTERM_BP_FAT_diff_sig_splic.xlsx\n this is file is based on the \nsplicing.diff\n file output of \ncuffdiff\n.  It generates a result sheet for each pairwise comparison. It reports DAVID enrichment results for Gene Ontology Biological Process (GOTERM BP) using genes labeled as significant by \ncuffdiff\n.\n\n\n\n\n\n\nOMIM_DISEASE_diff_sig_geneexp.xlsx\n this file is based on the \ngene_exp.diff\n file output of \ncuffdiff\n. It generates a result sheet for each pairwise comparison. It reports DAVID enrichment results for OMIM DISEASE using genes labeled as significant by \ncuffdiff\n.\n\n\n\n\n\n\nMore information on the standard ouput columns of \ncuffdiff\n can be found \nhere\n.\n\n\nHelp\n\n\n$ aDiff --help\n\nusage: aDiff [-h] [-D] [-i INPUTFOLDER] [-o OUTPUTFOLDER] [-G ORIGINALGTF]\n             [-C CUFFCOMPAREGTF] [-f INPUTFILES] [-s SHORTOUTPUTNAME]\n             [--sigOnly] [--TSV] [--TSVall] [--description] [--listMarts]\n             [--mart MART] [--listDatasets] [--dataset DATASET]\n             [--listFilters] [--filter FILTER] [--listAttributes]\n             [--outputBiotypes OUTPUTBIOTYPES] [--outputGoterms OUTPUTGOTERMS]\n             [--KEGG] [--listKEGGorganisms] [--KEGGorg KEGGORG] [--findKEGGdb]\n             [--KEGGdb KEGGDB] [--DAVIDid DAVIDID] [--DAVIDcat DAVIDCAT]\n             [-u DAVIDUSER] [--host HOST] [--organismtag {DMEL,CEL,MUS,HSA}]\n             [--species SPECIES] [--limit LIMIT] [--cuttoff CUTTOFF]\n             [--taxon TAXON] [--cytoscape_host CYTOSCAPE_HOST]\n             [--cytoscape_port CYTOSCAPE_PORT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -D, --DAVID           Use this flag to perform DAVID GO enrichment analysis\n                        (default: False)\n  -i INPUTFOLDER, --inputFolder INPUTFOLDER\n                        Cuffdiff output folder (default: None)\n  -o OUTPUTFOLDER, --outputFolder OUTPUTFOLDER\n                        Output folder (default: None)\n  -G ORIGINALGTF, --originalGTF ORIGINALGTF\n                        Original/downloaded GTF (default: None)\n  -C CUFFCOMPAREGTF, --cuffcompareGTF CUFFCOMPAREGTF\n                        Merged cuffcompared GTF (default: None)\n  -f INPUTFILES, --inputFiles INPUTFILES\n                        Implies -s. Use this option to select which *.diff\n                        files you wish to analyse.'. (default: gene_exp.diff\n                        promoters.diff splicing.diff cds.diff\n                        isoform_exp.diff)\n  -s SHORTOUTPUTNAME, --shortOutputName SHORTOUTPUTNAME\n                        Use this option to select a short outpput name for\n                        each *.diff file used in '-f'. No '.' (dots) allowed.\n                        (default: geneexp prom splic cds iso)\n  --sigOnly             Only create report tables for cuffdiff-labeled\n                        significantly changed genes (default: False)\n  --TSV                 For p values \n = 0.05 write tables as tab separated\n                        values (default: False)\n  --TSVall              Save p \n 0.05 save tables as tab separated values in a\n                        folder called TSV (default: False)\n  --description         Get a description of what this script does. (default:\n                        False)\n  --listMarts           List biomaRt Marts (default: False)\n  --mart MART           Your mart of choice. (default: ENSEMBL_MART_ENSEMBL)\n  --listDatasets        List datasets for your mart (default: False)\n  --dataset DATASET     Dataset of your choice. (default:\n                        celegans_gene_ensembl)\n  --listFilters         List available filters (default: False)\n  --filter FILTER       Filter to use to identify your genes. (default:\n                        ensembl_gene_id)\n  --listAttributes      List available attributes for your dataset. (default:\n                        False)\n  --outputBiotypes OUTPUTBIOTYPES\n                        Outputs/attributes for your biotypes data. Order has\n                        to be kept, ie. first IDs then biotype. (default:\n                        ensembl_gene_id gene_biotype)\n  --outputGoterms OUTPUTGOTERMS\n                        Outputs/attributes for your goterms data. Order has to\n                        be kept, ie. 1st gene_id, then go_id, then\n                        go_term_name (default: ensembl_gene_id go_id\n                        name_1006)\n  --KEGG                Add KEGG annotations (default: False)\n  --listKEGGorganisms   List KEGG organisms. (default: False)\n  --KEGGorg KEGGORG     KEGG organism. (default: cel)\n  --findKEGGdb          KEGG has DB identifier for each linked DB. Use this\n                        function to find the label of your DB, eg: 'ensembl-\n                        hsa', 'FlyBase'. This option requires --originalGTF\n                        and --KEGGorg (default: False)\n  --KEGGdb KEGGDB       KEGG database linked to your ensembl organism.\n                        (default: EnsemblGenomes-Gn)\n  --DAVIDid DAVIDID     DAVID's id for your dataset. List of ids available in\n                        http://david.abcc.ncifcrf.gov/content.jsp?file=DAVID_A\n                        PI.html#input_list (default: WORMBASE_GENE_ID)\n  --DAVIDcat DAVIDCAT   DAVID's categories you wish to analyse. List of\n                        available categories in https://david.ncifcrf.gov/cont\n                        ent.jsp?file=DAVID_API.html#approved_list. (default: G\n                        OTERM_BP_FAT,GOTERM_CC_FAT,GOTERM_MF_FAT,KEGG_PATHWAY,\n                        PFAM,PROSITE,GENETIC_ASSOCIATION_DB_DISEASE,OMIM_DISEA\n                        SE)\n  -u DAVIDUSER, --DAVIDuser DAVIDUSER\n                        Your DAVID's user id. example: 'John.Doe@age.mpg.de'\n                        (default: None)\n  --host HOST           Ensembl host. Check http://www.ensembl.org/info/websit\n                        e/archives/index.html for older releases. (default:\n                        http://www.ensembl.org/biomart)\n  --organismtag {DMEL,CEL,MUS,HSA}\n                        Organism tag. (default: None)\n  --species SPECIES     Species for string app query. eg. 'caenorhabditis\n                        elegans', 'drosophila melanogaster', 'mus musculus',\n                        'homo sapiens'. Default='caenorhabditis elegans'\n                        (default: caenorhabditis elegans)\n  --limit LIMIT         Limit for string app query. Number of extra genes to\n                        recover. If None, limit=N(query_genes)*.25 (default:\n                        None)\n  --cuttoff CUTTOFF     Confidence cuttoff for sting app query. Default=0.4\n                        (default: 0.4)\n  --taxon TAXON         Taxon id for string app query. For the species shown\n                        above, taxon id will be automatically identified.\n                        (default: None)\n  --cytoscape_host CYTOSCAPE_HOST\n                        Host address for cytoscape. (default: None)\n  --cytoscape_port CYTOSCAPE_PORT\n                        Cytoscape port. (default: None)", 
            "title": "aDiff"
        }, 
        {
            "location": "/executables/adiff/#intro", 
            "text": "aDiff  is an annotation tool for differential gene expression results generated by  cuffdiff  (Trapnell C.,  Nature Biotechnology , 2012).  It annotates  cuffdiff  outputs with ensembl gene ids, gene ontology terms and kegg ids.  Additonally it uses  DAVID s API (Huang DW,  Nature Protoc. , 2009; Huang DW,  Nucleic Acids Res. , 2009; Xiaoli J,  Bioinformatics , 2012) to perform enrichment analysis.  A  Cytoscape  (Shannon P,  Genome Research , 2003) instance running with the  String  (Szklarczyk D,  Nucleic Acids Res. , 2017) App installed can additionally be plugged in to generate expanded protein-protein interactions.  For a full RNAseq pipeline including  aDiff  check:  http://bioinformatics.age.mpg.de/presentations-tutorials/presentations/modules/rnaseq-tuxedo-update/#/intro", 
            "title": "Intro"
        }, 
        {
            "location": "/executables/adiff/#examples", 
            "text": "Example of an  aDiff  call on a  c. elegans  dataset:  $ aDiff -D -i cuffdiff_output -o adiff_output \\\n-G references/cel.latest.ensembl.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--dataset dmelanogaster_gene_ensembl \\\n--DAVIDuser  Registered.Email@david.com  \\\n--organismtag CEL \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234  Example of an  aDiff  call on a  d. melanogaster  dataset:  $ aDiff -D -i cuffdiff_output -o adiff_output \\\n-G references/Drosophila_melanogaster.BDGP6.90.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--dataset dmelanogaster_gene_ensembl \\\n--filter flybase_gene_id \\\n--outputBiotypes 'flybase_gene_id gene_biotype' \\\n--outputGoterms 'flybase_gene_id go_id name_1006' \\\n--DAVIDid FLYBASE_GENE_ID \\\n--DAVIDuser  Registered.Email@david.com  \\\n--organismtag DMEL \\\n--species 'drosophila melanogaster' \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234  Example of an  aDiff  call on a  mus musculus   dataset:  $ aDiff -i cufdiff_output -o adiff_output \\\n-G ensembl.mus_musculus.83.original.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--TSV \\\n--dataset mmusculus_gene_ensembl \\\n-u  Registered.Email@david.com  \\\n--DAVIDid ENSEMBL_GENE_ID \\\n--host http://dec2015.archive.ensembl.org/biomart \\\n--organismtag MUS \\\n--species 'mus musculus' \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234  Example of an  aDiff  call on a  h. sapiens   dataset:  $ aDiff -i cufdiff_output -o adiff_output \\\n-G ensembl.homo_sapiens.83.original.gtf \\\n-C cuffmerge_output/merged.gtf \\\n--TSV \\\n--dataset hsapiens_gene_ensembl \\\n-u  Registered.Email@david.com  \\\n--DAVIDid ENSEMBL_GENE_ID \\\n--host http://dec2015.archive.ensembl.org/biomart \\\n--organismtag HSA \\\n--species 'homo sapiens' \\\n--cytoscape_host 'localhost' \\\n--cytoscape_port 1234", 
            "title": "Examples"
        }, 
        {
            "location": "/executables/adiff/#output-files", 
            "text": "Example of the output for the the  h. sapiens  call above.    diff_sig_geneexp.xlsx  this file is based on the  gene_exp.diff  file output of  cuffdiff  adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in  cuffdiff ).    diff_sig_iso.xlsx  this file is based on the  isoform_exp.diff  file output of  cuffdiff  adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in  cuffdiff ).    diff_sig_prom.xlsx  this file is based on the  promoters.diff  file output of  cuffdiff  adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in  cuffdiff ).    diff_sig_splic.xlsx  this file is based on the  splicing.diff  file output of  cuffdiff  adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in  cuffdiff ).    diff_sig_cds.xlsx  htis file is based on the  cds.diff  file output of  cuffdiff  adding annotation columns to it. It contains one sheet for each pairwise comparison filtered to significant values (as defined in  cuffdiff ).    geneexp_ALL.tsv  this file is based on the  gene_exp.diff  file output of  cuffdiff  adding annotation columns to it.    iso_ALL.tsv  this file is based on the  isoform_exp.diff  file output of  cuffdiff  adding annotation columns to it.    prom_ALL.tsv  this file is based on the  promoters.diff  file output of  cuffdiff  adding annotation columns to it.    splic_ALL.tsv  this file is based on the  splicing.diff  file output of  cuffdiff  adding annotation columns to it.    cds_ALL.tsv  this file is based on the  cds.diff  file output of  cuffdiff  adding annotation columns to it.    diff_p.05.xlsx  contains a sheet for each of the files above (ie.  geneexp_ALL.tsv ,  iso_ALL.tsv ,  prom_ALL.tsv ,  splic_ALL.tsv ,  cds_ALL.tsv  ) subset to p values bellow 0.05.    KEGG_PATHWAY_diff_sig_geneexp.xlsx  this file is based on the  gene_exp.diff  file output of  cuffdiff . It generates a result sheet for each pairwise comparison. It reports DAVID enrichment results for KEGG using genes labeled as significant by  cuffdiff .    GOTERM_BP_FAT_diff_sig_splic.xlsx  this is file is based on the  splicing.diff  file output of  cuffdiff .  It generates a result sheet for each pairwise comparison. It reports DAVID enrichment results for Gene Ontology Biological Process (GOTERM BP) using genes labeled as significant by  cuffdiff .    OMIM_DISEASE_diff_sig_geneexp.xlsx  this file is based on the  gene_exp.diff  file output of  cuffdiff . It generates a result sheet for each pairwise comparison. It reports DAVID enrichment results for OMIM DISEASE using genes labeled as significant by  cuffdiff .    More information on the standard ouput columns of  cuffdiff  can be found  here .", 
            "title": "Output files"
        }, 
        {
            "location": "/executables/adiff/#help", 
            "text": "$ aDiff --help\n\nusage: aDiff [-h] [-D] [-i INPUTFOLDER] [-o OUTPUTFOLDER] [-G ORIGINALGTF]\n             [-C CUFFCOMPAREGTF] [-f INPUTFILES] [-s SHORTOUTPUTNAME]\n             [--sigOnly] [--TSV] [--TSVall] [--description] [--listMarts]\n             [--mart MART] [--listDatasets] [--dataset DATASET]\n             [--listFilters] [--filter FILTER] [--listAttributes]\n             [--outputBiotypes OUTPUTBIOTYPES] [--outputGoterms OUTPUTGOTERMS]\n             [--KEGG] [--listKEGGorganisms] [--KEGGorg KEGGORG] [--findKEGGdb]\n             [--KEGGdb KEGGDB] [--DAVIDid DAVIDID] [--DAVIDcat DAVIDCAT]\n             [-u DAVIDUSER] [--host HOST] [--organismtag {DMEL,CEL,MUS,HSA}]\n             [--species SPECIES] [--limit LIMIT] [--cuttoff CUTTOFF]\n             [--taxon TAXON] [--cytoscape_host CYTOSCAPE_HOST]\n             [--cytoscape_port CYTOSCAPE_PORT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -D, --DAVID           Use this flag to perform DAVID GO enrichment analysis\n                        (default: False)\n  -i INPUTFOLDER, --inputFolder INPUTFOLDER\n                        Cuffdiff output folder (default: None)\n  -o OUTPUTFOLDER, --outputFolder OUTPUTFOLDER\n                        Output folder (default: None)\n  -G ORIGINALGTF, --originalGTF ORIGINALGTF\n                        Original/downloaded GTF (default: None)\n  -C CUFFCOMPAREGTF, --cuffcompareGTF CUFFCOMPAREGTF\n                        Merged cuffcompared GTF (default: None)\n  -f INPUTFILES, --inputFiles INPUTFILES\n                        Implies -s. Use this option to select which *.diff\n                        files you wish to analyse.'. (default: gene_exp.diff\n                        promoters.diff splicing.diff cds.diff\n                        isoform_exp.diff)\n  -s SHORTOUTPUTNAME, --shortOutputName SHORTOUTPUTNAME\n                        Use this option to select a short outpput name for\n                        each *.diff file used in '-f'. No '.' (dots) allowed.\n                        (default: geneexp prom splic cds iso)\n  --sigOnly             Only create report tables for cuffdiff-labeled\n                        significantly changed genes (default: False)\n  --TSV                 For p values   = 0.05 write tables as tab separated\n                        values (default: False)\n  --TSVall              Save p   0.05 save tables as tab separated values in a\n                        folder called TSV (default: False)\n  --description         Get a description of what this script does. (default:\n                        False)\n  --listMarts           List biomaRt Marts (default: False)\n  --mart MART           Your mart of choice. (default: ENSEMBL_MART_ENSEMBL)\n  --listDatasets        List datasets for your mart (default: False)\n  --dataset DATASET     Dataset of your choice. (default:\n                        celegans_gene_ensembl)\n  --listFilters         List available filters (default: False)\n  --filter FILTER       Filter to use to identify your genes. (default:\n                        ensembl_gene_id)\n  --listAttributes      List available attributes for your dataset. (default:\n                        False)\n  --outputBiotypes OUTPUTBIOTYPES\n                        Outputs/attributes for your biotypes data. Order has\n                        to be kept, ie. first IDs then biotype. (default:\n                        ensembl_gene_id gene_biotype)\n  --outputGoterms OUTPUTGOTERMS\n                        Outputs/attributes for your goterms data. Order has to\n                        be kept, ie. 1st gene_id, then go_id, then\n                        go_term_name (default: ensembl_gene_id go_id\n                        name_1006)\n  --KEGG                Add KEGG annotations (default: False)\n  --listKEGGorganisms   List KEGG organisms. (default: False)\n  --KEGGorg KEGGORG     KEGG organism. (default: cel)\n  --findKEGGdb          KEGG has DB identifier for each linked DB. Use this\n                        function to find the label of your DB, eg: 'ensembl-\n                        hsa', 'FlyBase'. This option requires --originalGTF\n                        and --KEGGorg (default: False)\n  --KEGGdb KEGGDB       KEGG database linked to your ensembl organism.\n                        (default: EnsemblGenomes-Gn)\n  --DAVIDid DAVIDID     DAVID's id for your dataset. List of ids available in\n                        http://david.abcc.ncifcrf.gov/content.jsp?file=DAVID_A\n                        PI.html#input_list (default: WORMBASE_GENE_ID)\n  --DAVIDcat DAVIDCAT   DAVID's categories you wish to analyse. List of\n                        available categories in https://david.ncifcrf.gov/cont\n                        ent.jsp?file=DAVID_API.html#approved_list. (default: G\n                        OTERM_BP_FAT,GOTERM_CC_FAT,GOTERM_MF_FAT,KEGG_PATHWAY,\n                        PFAM,PROSITE,GENETIC_ASSOCIATION_DB_DISEASE,OMIM_DISEA\n                        SE)\n  -u DAVIDUSER, --DAVIDuser DAVIDUSER\n                        Your DAVID's user id. example: 'John.Doe@age.mpg.de'\n                        (default: None)\n  --host HOST           Ensembl host. Check http://www.ensembl.org/info/websit\n                        e/archives/index.html for older releases. (default:\n                        http://www.ensembl.org/biomart)\n  --organismtag {DMEL,CEL,MUS,HSA}\n                        Organism tag. (default: None)\n  --species SPECIES     Species for string app query. eg. 'caenorhabditis\n                        elegans', 'drosophila melanogaster', 'mus musculus',\n                        'homo sapiens'. Default='caenorhabditis elegans'\n                        (default: caenorhabditis elegans)\n  --limit LIMIT         Limit for string app query. Number of extra genes to\n                        recover. If None, limit=N(query_genes)*.25 (default:\n                        None)\n  --cuttoff CUTTOFF     Confidence cuttoff for sting app query. Default=0.4\n                        (default: 0.4)\n  --taxon TAXON         Taxon id for string app query. For the species shown\n                        above, taxon id will be automatically identified.\n                        (default: None)\n  --cytoscape_host CYTOSCAPE_HOST\n                        Host address for cytoscape. (default: None)\n  --cytoscape_port CYTOSCAPE_PORT\n                        Cytoscape port. (default: None)", 
            "title": "Help"
        }, 
        {
            "location": "/executables/obo2tsv/", 
            "text": "Intro\n\n\nobo2tsv\n parses a gene ontology obo file to tsv. It will include for each term columns for parent terms as well as child terms.\n\n\nExamples\n\n\n$ obo2tsv -u http://geneontology.org/ontology/go-basic.obo \\\n-o go-basic.tsv -c 4 \\\n--organism http://geneontology.org/gene-associations/gene_association.fb.gz\n\n\n\n\nLinks to other \n--organism\n can be found on \nhttp://geneontology.org/page/download-annotations\n.\n\n\nHelp\n\n\n$ obo2tsv --help\n\nusage: obo2tsv [-h] [-i INPUT] [-u URL] [-o OUTPUT] [-c CPUS]\n               [--organism ORGANISM]\n\nobo to tsv parser\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        go-basic.obo file. Files can be downloaded from\n                        http://geneontology.org/page/download-ontology.\n                        (default: None)\n  -u URL, --url URL     If no go-basic.obo input file is specified, a url to a\n                        target obo file can be specified instead. (default:\n                        http://geneontology.org/ontology/go-basic.obo)\n  -o OUTPUT, --output OUTPUT\n                        Name of output tab separated file. (default: go-\n                        basic.tsv)\n  -c CPUS, --cpus CPUS  Number of cpus. (default: 36)\n  --organism ORGANISM   Optional, merge GO obo.tsv with a GO annotation for an\n                        organism: either a link to a file on geneontology.org\n                        eg. http://geneontology.org/gene-\n                        associations/gene_association.fb.gz or the path for\n                        the respective downloded .gz file. (default: None)", 
            "title": "obo2tsv"
        }, 
        {
            "location": "/executables/obo2tsv/#intro", 
            "text": "obo2tsv  parses a gene ontology obo file to tsv. It will include for each term columns for parent terms as well as child terms.", 
            "title": "Intro"
        }, 
        {
            "location": "/executables/obo2tsv/#examples", 
            "text": "$ obo2tsv -u http://geneontology.org/ontology/go-basic.obo \\\n-o go-basic.tsv -c 4 \\\n--organism http://geneontology.org/gene-associations/gene_association.fb.gz  Links to other  --organism  can be found on  http://geneontology.org/page/download-annotations .", 
            "title": "Examples"
        }, 
        {
            "location": "/executables/obo2tsv/#help", 
            "text": "$ obo2tsv --help\n\nusage: obo2tsv [-h] [-i INPUT] [-u URL] [-o OUTPUT] [-c CPUS]\n               [--organism ORGANISM]\n\nobo to tsv parser\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        go-basic.obo file. Files can be downloaded from\n                        http://geneontology.org/page/download-ontology.\n                        (default: None)\n  -u URL, --url URL     If no go-basic.obo input file is specified, a url to a\n                        target obo file can be specified instead. (default:\n                        http://geneontology.org/ontology/go-basic.obo)\n  -o OUTPUT, --output OUTPUT\n                        Name of output tab separated file. (default: go-\n                        basic.tsv)\n  -c CPUS, --cpus CPUS  Number of cpus. (default: 36)\n  --organism ORGANISM   Optional, merge GO obo.tsv with a GO annotation for an\n                        organism: either a link to a file on geneontology.org\n                        eg. http://geneontology.org/gene-\n                        associations/gene_association.fb.gz or the path for\n                        the respective downloded .gz file. (default: None)", 
            "title": "Help"
        }
    ]
}